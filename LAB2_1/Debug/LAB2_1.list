
LAB2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000656c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006744  08006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800678c  0800678c  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08006794  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000050  080067e0  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080067e0  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ca5  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd9  00000000  00000000  00037d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0003a940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001082  00000000  00000000  0003be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280bf  00000000  00000000  0003ceea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018583  00000000  00000000  00064fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011165b  00000000  00000000  0007d52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d20  00000000  00000000  0018eb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001948a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000050 	.word	0x20000050
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800672c 	.word	0x0800672c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000054 	.word	0x20000054
 8000214:	0800672c 	.word	0x0800672c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fdee 	bl	80018d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f9e7 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 fba5 	bl	800144c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d02:	f000 fb79 	bl	80013f8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d06:	f000 fadf 	bl	80012c8 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000d0a:	f000 fb27 	bl	800135c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d0e:	f000 fa29 	bl	8001164 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d12:	f000 fa9f 	bl	8001254 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d16:	48b6      	ldr	r0, [pc, #728]	; (8000ff0 <main+0x300>)
 8000d18:	f004 fb02 	bl	8005320 <HAL_TIM_Base_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d1c:	217f      	movs	r1, #127	; 0x7f
 8000d1e:	48b5      	ldr	r0, [pc, #724]	; (8000ff4 <main+0x304>)
 8000d20:	f002 f958 	bl	8002fd4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCRead, 1);
 8000d24:	4bb4      	ldr	r3, [pc, #720]	; (8000ff8 <main+0x308>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	48b1      	ldr	r0, [pc, #708]	; (8000ff4 <main+0x304>)
 8000d2e:	f001 fa43 	bl	80021b8 <HAL_ADC_Start_DMA>

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000d32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	48b0      	ldr	r0, [pc, #704]	; (8000ffc <main+0x30c>)
 8000d3c:	f002 fc52 	bl	80035e4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	48ae      	ldr	r0, [pc, #696]	; (8000ffc <main+0x30c>)
 8000d44:	f002 fbe2 	bl	800350c <HAL_DAC_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  static uint32_t timestamp = 0;
		  if(timestamp<=__HAL_TIM_GET_COUNTER(&htim2))
 8000d48:	4ba9      	ldr	r3, [pc, #676]	; (8000ff0 <main+0x300>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d4e:	4bac      	ldr	r3, [pc, #688]	; (8001000 <main+0x310>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d3f8      	bcc.n	8000d48 <main+0x58>
		  {
			  //re-time
			  timestamp = __HAL_TIM_GET_COUNTER(&htim2) + 1000;
 8000d56:	4ba6      	ldr	r3, [pc, #664]	; (8000ff0 <main+0x300>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000d60:	4aa7      	ldr	r2, [pc, #668]	; (8001000 <main+0x310>)
 8000d62:	6013      	str	r3, [r2, #0]
			  count++;
 8000d64:	4ba7      	ldr	r3, [pc, #668]	; (8001004 <main+0x314>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	1c54      	adds	r4, r2, #1
 8000d6c:	f143 0500 	adc.w	r5, r3, #0
 8000d70:	4ba4      	ldr	r3, [pc, #656]	; (8001004 <main+0x314>)
 8000d72:	e9c3 4500 	strd	r4, r5, [r3]
			  //equation
			  //Vin = ADCRead*12/4095;

			  num = (K_t*T*T*Vin)+(((2*J*L)+(J*R*T)+(L*B*T))*omega_1)-(J*L*omega_2);
 8000d76:	4ba4      	ldr	r3, [pc, #656]	; (8001008 <main+0x318>)
 8000d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d7c:	4ba3      	ldr	r3, [pc, #652]	; (800100c <main+0x31c>)
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	f7ff fc05 	bl	8000590 <__aeabi_dmul>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4b9f      	ldr	r3, [pc, #636]	; (800100c <main+0x31c>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f7ff fbfc 	bl	8000590 <__aeabi_dmul>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4b9b      	ldr	r3, [pc, #620]	; (8001010 <main+0x320>)
 8000da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da6:	f7ff fbf3 	bl	8000590 <__aeabi_dmul>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4690      	mov	r8, r2
 8000db0:	4699      	mov	r9, r3
 8000db2:	4b98      	ldr	r3, [pc, #608]	; (8001014 <main+0x324>)
 8000db4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	f7ff fa32 	bl	8000224 <__adddf3>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4b93      	ldr	r3, [pc, #588]	; (8001018 <main+0x328>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fbdf 	bl	8000590 <__aeabi_dmul>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4692      	mov	sl, r2
 8000dd8:	469b      	mov	fp, r3
 8000dda:	4b8e      	ldr	r3, [pc, #568]	; (8001014 <main+0x324>)
 8000ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000de0:	4b8e      	ldr	r3, [pc, #568]	; (800101c <main+0x32c>)
 8000de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de6:	f7ff fbd3 	bl	8000590 <__aeabi_dmul>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	4610      	mov	r0, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	4b86      	ldr	r3, [pc, #536]	; (800100c <main+0x31c>)
 8000df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df8:	f7ff fbca 	bl	8000590 <__aeabi_dmul>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4650      	mov	r0, sl
 8000e02:	4659      	mov	r1, fp
 8000e04:	f7ff fa0e 	bl	8000224 <__adddf3>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4692      	mov	sl, r2
 8000e0e:	469b      	mov	fp, r3
 8000e10:	4b81      	ldr	r3, [pc, #516]	; (8001018 <main+0x328>)
 8000e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e16:	4b82      	ldr	r3, [pc, #520]	; (8001020 <main+0x330>)
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f7ff fbb8 	bl	8000590 <__aeabi_dmul>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	4b78      	ldr	r3, [pc, #480]	; (800100c <main+0x31c>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff fbaf 	bl	8000590 <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4650      	mov	r0, sl
 8000e38:	4659      	mov	r1, fp
 8000e3a:	f7ff f9f3 	bl	8000224 <__adddf3>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	4b77      	ldr	r3, [pc, #476]	; (8001024 <main+0x334>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fba0 	bl	8000590 <__aeabi_dmul>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4640      	mov	r0, r8
 8000e56:	4649      	mov	r1, r9
 8000e58:	f7ff f9e4 	bl	8000224 <__adddf3>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4690      	mov	r8, r2
 8000e62:	4699      	mov	r9, r3
 8000e64:	4b6b      	ldr	r3, [pc, #428]	; (8001014 <main+0x324>)
 8000e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e6a:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <main+0x328>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fb8e 	bl	8000590 <__aeabi_dmul>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4b6a      	ldr	r3, [pc, #424]	; (8001028 <main+0x338>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff fb85 	bl	8000590 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4640      	mov	r0, r8
 8000e8c:	4649      	mov	r1, r9
 8000e8e:	f7ff f9c7 	bl	8000220 <__aeabi_dsub>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4965      	ldr	r1, [pc, #404]	; (800102c <main+0x33c>)
 8000e98:	e9c1 2300 	strd	r2, r3, [r1]
			  den = (J*L)+(J*R*T)+(L*B*T)+(R*B*T*T)+(K_t*K_e*T*T);
 8000e9c:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <main+0x324>)
 8000e9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ea2:	4b5d      	ldr	r3, [pc, #372]	; (8001018 <main+0x328>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fb72 	bl	8000590 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4690      	mov	r8, r2
 8000eb2:	4699      	mov	r9, r3
 8000eb4:	4b57      	ldr	r3, [pc, #348]	; (8001014 <main+0x324>)
 8000eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eba:	4b58      	ldr	r3, [pc, #352]	; (800101c <main+0x32c>)
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f7ff fb66 	bl	8000590 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4610      	mov	r0, r2
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <main+0x31c>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb5d 	bl	8000590 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4640      	mov	r0, r8
 8000edc:	4649      	mov	r1, r9
 8000ede:	f7ff f9a1 	bl	8000224 <__adddf3>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4690      	mov	r8, r2
 8000ee8:	4699      	mov	r9, r3
 8000eea:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <main+0x328>)
 8000eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ef0:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <main+0x330>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff fb4b 	bl	8000590 <__aeabi_dmul>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	4b42      	ldr	r3, [pc, #264]	; (800100c <main+0x31c>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fb42 	bl	8000590 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4640      	mov	r0, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	f7ff f986 	bl	8000224 <__adddf3>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4690      	mov	r8, r2
 8000f1e:	4699      	mov	r9, r3
 8000f20:	4b3e      	ldr	r3, [pc, #248]	; (800101c <main+0x32c>)
 8000f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <main+0x330>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb30 	bl	8000590 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	4b34      	ldr	r3, [pc, #208]	; (800100c <main+0x31c>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f7ff fb27 	bl	8000590 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4b30      	ldr	r3, [pc, #192]	; (800100c <main+0x31c>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff fb1e 	bl	8000590 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4640      	mov	r0, r8
 8000f5a:	4649      	mov	r1, r9
 8000f5c:	f7ff f962 	bl	8000224 <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4690      	mov	r8, r2
 8000f66:	4699      	mov	r9, r3
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <main+0x318>)
 8000f6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <main+0x340>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff fb0c 	bl	8000590 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <main+0x31c>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb03 	bl	8000590 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <main+0x31c>)
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	f7ff fafa 	bl	8000590 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	4649      	mov	r1, r9
 8000fa4:	f7ff f93e 	bl	8000224 <__adddf3>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4921      	ldr	r1, [pc, #132]	; (8001034 <main+0x344>)
 8000fae:	e9c1 2300 	strd	r2, r3, [r1]
			  omega = num/den;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <main+0x33c>)
 8000fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <main+0x344>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fc11 	bl	80007e4 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	491c      	ldr	r1, [pc, #112]	; (8001038 <main+0x348>)
 8000fc8:	e9c1 2300 	strd	r2, r3, [r1]

			  Vout = 1.65 + (omega-0)*((2.65-1.65)/(100));
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <main+0x348>)
 8000fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd2:	a305      	add	r3, pc, #20	; (adr r3, 8000fe8 <main+0x2f8>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fada 	bl	8000590 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	e02a      	b.n	800103c <main+0x34c>
 8000fe6:	bf00      	nop
 8000fe8:	47ae147b 	.word	0x47ae147b
 8000fec:	3f847ae1 	.word	0x3f847ae1
 8000ff0:	200001e0 	.word	0x200001e0
 8000ff4:	2000006c 	.word	0x2000006c
 8000ff8:	20000260 	.word	0x20000260
 8000ffc:	20000138 	.word	0x20000138
 8001000:	20000270 	.word	0x20000270
 8001004:	20000248 	.word	0x20000248
 8001008:	20000030 	.word	0x20000030
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000020 	.word	0x20000020
 8001018:	20000028 	.word	0x20000028
 800101c:	20000010 	.word	0x20000010
 8001020:	20000018 	.word	0x20000018
 8001024:	20000238 	.word	0x20000238
 8001028:	20000240 	.word	0x20000240
 800102c:	20000250 	.word	0x20000250
 8001030:	20000038 	.word	0x20000038
 8001034:	20000258 	.word	0x20000258
 8001038:	20000230 	.word	0x20000230
 800103c:	a321      	add	r3, pc, #132	; (adr r3, 80010c4 <main+0x3d4>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff f8ef 	bl	8000224 <__adddf3>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4919      	ldr	r1, [pc, #100]	; (80010b0 <main+0x3c0>)
 800104c:	e9c1 2300 	strd	r2, r3, [r1]
			  DACOut = Vout*4095/3.3;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <main+0x3c0>)
 8001052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001056:	a312      	add	r3, pc, #72	; (adr r3, 80010a0 <main+0x3b0>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fa98 	bl	8000590 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	a30f      	add	r3, pc, #60	; (adr r3, 80010a8 <main+0x3b8>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff fbb9 	bl	80007e4 <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fc9b 	bl	80009b4 <__aeabi_d2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <main+0x3c4>)
 8001084:	801a      	strh	r2, [r3, #0]
//			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DACOut);
			  //re-omega
			  omega_2 = omega_1;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <main+0x3c8>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	490b      	ldr	r1, [pc, #44]	; (80010bc <main+0x3cc>)
 800108e:	e9c1 2300 	strd	r2, r3, [r1]
			  omega_1 = omega;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <main+0x3d0>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <main+0x3c8>)
 800109a:	e9c1 2300 	strd	r2, r3, [r1]
  {
 800109e:	e653      	b.n	8000d48 <main+0x58>
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40affe00 	.word	0x40affe00
 80010a8:	66666666 	.word	0x66666666
 80010ac:	400a6666 	.word	0x400a6666
 80010b0:	20000268 	.word	0x20000268
 80010b4:	20000262 	.word	0x20000262
 80010b8:	20000238 	.word	0x20000238
 80010bc:	20000240 	.word	0x20000240
 80010c0:	20000230 	.word	0x20000230
 80010c4:	66666666 	.word	0x66666666
 80010c8:	3ffa6666 	.word	0x3ffa6666

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	2238      	movs	r2, #56	; 0x38
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 fafa 	bl	80066d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f003 f88e 	bl	8004210 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fe:	2340      	movs	r3, #64	; 0x40
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001106:	2302      	movs	r3, #2
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800110a:	2304      	movs	r3, #4
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800110e:	2355      	movs	r3, #85	; 0x55
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f928 	bl	8004378 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800112e:	f000 f9fb 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fc26 	bl	800499c <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001156:	f000 f9e7 	bl	8001528 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2220      	movs	r2, #32
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f005 faa9 	bl	80066d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <MX_ADC1_Init+0xe8>)
 8001184:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001188:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <MX_ADC1_Init+0xe8>)
 800118c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001190:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <MX_ADC1_Init+0xe8>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <MX_ADC1_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_ADC1_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_ADC1_Init+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_ADC1_Init+0xe8>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_ADC1_Init+0xe8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <MX_ADC1_Init+0xe8>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <MX_ADC1_Init+0xe8>)
 80011be:	2201      	movs	r2, #1
 80011c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <MX_ADC1_Init+0xe8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <MX_ADC1_Init+0xe8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_ADC1_Init+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_ADC1_Init+0xe8>)
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_ADC1_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_ADC1_Init+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ec:	4817      	ldr	r0, [pc, #92]	; (800124c <MX_ADC1_Init+0xe8>)
 80011ee:	f000 fe27 	bl	8001e40 <HAL_ADC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80011f8:	f000 f996 	bl	8001528 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	4619      	mov	r1, r3
 8001206:	4811      	ldr	r0, [pc, #68]	; (800124c <MX_ADC1_Init+0xe8>)
 8001208:	f001 ff46 	bl	8003098 <HAL_ADCEx_MultiModeConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001212:	f000 f989 	bl	8001528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_ADC1_Init+0xec>)
 8001218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121a:	2306      	movs	r3, #6
 800121c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800121e:	2307      	movs	r3, #7
 8001220:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001222:	237f      	movs	r3, #127	; 0x7f
 8001224:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001226:	2304      	movs	r3, #4
 8001228:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_ADC1_Init+0xe8>)
 8001234:	f001 f8b2 	bl	800239c <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800123e:	f000 f973 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000006c 	.word	0x2000006c
 8001250:	04300002 	.word	0x04300002

08001254 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2230      	movs	r2, #48	; 0x30
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f005 fa37 	bl	80066d4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_DAC1_Init+0x6c>)
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <MX_DAC1_Init+0x70>)
 800126a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800126c:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_DAC1_Init+0x6c>)
 800126e:	f002 f92a 	bl	80034c6 <HAL_DAC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001278:	f000 f956 	bl	8001528 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800127c:	2302      	movs	r3, #2
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001298:	2304      	movs	r3, #4
 800129a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_DAC1_Init+0x6c>)
 80012a8:	f002 f9ca 	bl	8003640 <HAL_DAC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80012b2:	f000 f939 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000138 	.word	0x20000138
 80012c4:	50000800 	.word	0x50000800

080012c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 80012ce:	4a22      	ldr	r2, [pc, #136]	; (8001358 <MX_LPUART1_UART_Init+0x90>)
 80012d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 8001306:	2200      	movs	r2, #0
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 800130c:	f004 fb74 	bl	80059f8 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 f907 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131a:	2100      	movs	r1, #0
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 800131e:	f005 f90f 	bl	8006540 <HAL_UARTEx_SetTxFifoThreshold>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001328:	f000 f8fe 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 8001330:	f005 f944 	bl	80065bc <HAL_UARTEx_SetRxFifoThreshold>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800133a:	f000 f8f5 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_LPUART1_UART_Init+0x8c>)
 8001340:	f005 f8c5 	bl	80064ce <HAL_UARTEx_DisableFifoMode>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800134a:	f000 f8ed 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000014c 	.word	0x2000014c
 8001358:	40008000 	.word	0x40008000

0800135c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_TIM2_Init+0x98>)
 800137c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001380:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_TIM2_Init+0x98>)
 8001384:	22a9      	movs	r2, #169	; 0xa9
 8001386:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_TIM2_Init+0x98>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_TIM2_Init+0x98>)
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <MX_TIM2_Init+0x98>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_TIM2_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a2:	4814      	ldr	r0, [pc, #80]	; (80013f4 <MX_TIM2_Init+0x98>)
 80013a4:	f003 ff64 	bl	8005270 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013ae:	f000 f8bb 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_TIM2_Init+0x98>)
 80013c0:	f004 f81e 	bl	8005400 <HAL_TIM_ConfigClockSource>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013ca:	f000 f8ad 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_TIM2_Init+0x98>)
 80013dc:	f004 fa76 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013e6:	f000 f89f 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001e0 	.word	0x200001e0

080013f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_DMA_Init+0x50>)
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <MX_DMA_Init+0x50>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6493      	str	r3, [r2, #72]	; 0x48
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_DMA_Init+0x50>)
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_DMA_Init+0x50>)
 8001418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141a:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <MX_DMA_Init+0x50>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6493      	str	r3, [r2, #72]	; 0x48
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_DMA_Init+0x50>)
 8001424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	200b      	movs	r0, #11
 8001434:	f002 f813 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001438:	200b      	movs	r0, #11
 800143a:	f002 f82a 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	4a2e      	ldr	r2, [pc, #184]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <MX_GPIO_Init+0xd4>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	4a28      	ldr	r2, [pc, #160]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a22      	ldr	r2, [pc, #136]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2120      	movs	r1, #32
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f002 fe65 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	480f      	ldr	r0, [pc, #60]	; (8001524 <MX_GPIO_Init+0xd8>)
 80014e6:	f002 fcd5 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014ea:	2320      	movs	r3, #32
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001504:	f002 fcc6 	bl	8003e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2028      	movs	r0, #40	; 0x28
 800150e:	f001 ffa6 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001512:	2028      	movs	r0, #40	; 0x28
 8001514:	f001 ffbd 	bl	8003492 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	48000800 	.word	0x48000800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x44>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_MspInit+0x44>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6613      	str	r3, [r2, #96]	; 0x60
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_MspInit+0x44>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_MspInit+0x44>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x44>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6593      	str	r3, [r2, #88]	; 0x58
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x44>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800156a:	f002 fef5 	bl	8004358 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09e      	sub	sp, #120	; 0x78
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	2254      	movs	r2, #84	; 0x54
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f005 f899 	bl	80066d4 <memset>
  if(hadc->Instance==ADC1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015aa:	d15f      	bne.n	800166c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015b6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fc09 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015c8:	f7ff ffae 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <HAL_ADC_MspInit+0xf8>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	4a28      	ldr	r2, [pc, #160]	; (8001674 <HAL_ADC_MspInit+0xf8>)
 80015d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <HAL_ADC_MspInit+0xf8>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_ADC_MspInit+0xf8>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	4a22      	ldr	r2, [pc, #136]	; (8001674 <HAL_ADC_MspInit+0xf8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_ADC_MspInit+0xf8>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015fc:	2301      	movs	r3, #1
 80015fe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001600:	2303      	movs	r3, #3
 8001602:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f002 fc3f 	bl	8003e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 8001618:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_ADC_MspInit+0x100>)
 800161a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 800161e:	2205      	movs	r2, #5
 8001620:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 8001636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 800163e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001642:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 8001646:	2220      	movs	r2, #32
 8001648:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 8001652:	f002 f9ad 	bl	80039b0 <HAL_DMA_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800165c:	f7ff ff64 	bl	8001528 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_ADC_MspInit+0xfc>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	3778      	adds	r7, #120	; 0x78
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	200000d8 	.word	0x200000d8
 800167c:	40020008 	.word	0x40020008

08001680 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <HAL_DAC_MspInit+0x74>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d124      	bne.n	80016ec <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_DAC_MspInit+0x78>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <HAL_DAC_MspInit+0x78>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_DAC_MspInit+0x78>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_DAC_MspInit+0x78>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <HAL_DAC_MspInit+0x78>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_DAC_MspInit+0x78>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016d2:	2310      	movs	r3, #16
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d6:	2303      	movs	r3, #3
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f002 fbd4 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	50000800 	.word	0x50000800
 80016f8:	40021000 	.word	0x40021000

080016fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09e      	sub	sp, #120	; 0x78
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2254      	movs	r2, #84	; 0x54
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f004 ffd9 	bl	80066d4 <memset>
  if(huart->Instance==LPUART1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HAL_UART_MspInit+0xa8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d136      	bne.n	800179a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800172c:	2320      	movs	r3, #32
 800172e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4618      	mov	r0, r3
 800173a:	f003 fb4b 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001744:	f7ff fef0 	bl	8001528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_UART_MspInit+0xac>)
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <HAL_UART_MspInit+0xac>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_UART_MspInit+0xac>)
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_UART_MspInit+0xac>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_UART_MspInit+0xac>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_UART_MspInit+0xac>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001778:	230c      	movs	r3, #12
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001788:	230c      	movs	r3, #12
 800178a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f002 fb7d 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3778      	adds	r7, #120	; 0x78
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40008000 	.word	0x40008000
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017bc:	d10b      	bne.n	80017d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_TIM_Base_MspInit+0x38>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_TIM_Base_MspInit+0x38>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_TIM_Base_MspInit+0x38>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f8a2 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Channel1_IRQHandler+0x10>)
 8001842:	f002 f9d8 	bl	8003bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000d8 	.word	0x200000d8

08001850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001858:	f002 fcb6 	bl	80041c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001886:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001888:	f7ff ffea 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800188e:	490d      	ldr	r1, [pc, #52]	; (80018c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <LoopForever+0xe>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a4:	4c0a      	ldr	r4, [pc, #40]	; (80018d0 <LoopForever+0x16>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f004 ff17 	bl	80066e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018b6:	f7ff fa1b 	bl	8000cf0 <main>

080018ba <LoopForever>:

LoopForever:
    b LoopForever
 80018ba:	e7fe      	b.n	80018ba <LoopForever>
  ldr   r0, =_estack
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80018c8:	08006794 	.word	0x08006794
  ldr r2, =_sbss
 80018cc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80018d0:	20000278 	.word	0x20000278

080018d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC1_2_IRQHandler>

080018d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f001 fdb1 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f80e 	bl	8001908 <HAL_InitTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	71fb      	strb	r3, [r7, #7]
 80018f6:	e001      	b.n	80018fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018f8:	f7ff fe1c 	bl	8001534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018fc:	79fb      	ldrb	r3, [r7, #7]

}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_InitTick+0x68>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d022      	beq.n	8001962 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_InitTick+0x6c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_InitTick+0x68>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001928:	fbb1 f3f3 	udiv	r3, r1, r3
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fdbc 	bl	80034ae <HAL_SYSTICK_Config>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10f      	bne.n	800195c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	d809      	bhi.n	8001956 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001942:	2200      	movs	r2, #0
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	f04f 30ff 	mov.w	r0, #4294967295
 800194a:	f001 fd88 	bl	800345e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_InitTick+0x70>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e007      	b.n	8001966 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	e004      	b.n	8001966 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000048 	.word	0x20000048
 8001974:	20000040 	.word	0x20000040
 8001978:	20000044 	.word	0x20000044

0800197c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_IncTick+0x1c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_IncTick+0x20>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4413      	add	r3, r2
 800198a:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_IncTick+0x1c>)
 800198c:	6013      	str	r3, [r2, #0]
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	20000274 	.word	0x20000274
 800199c:	20000048 	.word	0x20000048

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000274 	.word	0x20000274

080019b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	609a      	str	r2, [r3, #8]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3360      	adds	r3, #96	; 0x60
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <LL_ADC_SetOffset+0x44>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	03fff000 	.word	0x03fff000

08001a68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3360      	adds	r3, #96	; 0x60
 8001a76:	461a      	mov	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3360      	adds	r3, #96	; 0x60
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3360      	adds	r3, #96	; 0x60
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3360      	adds	r3, #96	; 0x60
 8001b10:	461a      	mov	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	615a      	str	r2, [r3, #20]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b087      	sub	sp, #28
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3330      	adds	r3, #48	; 0x30
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	211f      	movs	r1, #31
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	f003 011f 	and.w	r1, r3, #31
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bce:	bf00      	nop
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b087      	sub	sp, #28
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3314      	adds	r3, #20
 8001bea:	461a      	mov	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	0e5b      	lsrs	r3, r3, #25
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	4413      	add	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	0d1b      	lsrs	r3, r3, #20
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2107      	movs	r1, #7
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	401a      	ands	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	0d1b      	lsrs	r3, r3, #20
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c24:	bf00      	nop
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0318 	and.w	r3, r3, #24
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c54:	40d9      	lsrs	r1, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	400b      	ands	r3, r1
 8001c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	0007ffff 	.word	0x0007ffff

08001c78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 031f 	and.w	r3, r3, #31
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6093      	str	r3, [r2, #8]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ccc:	d101      	bne.n	8001cd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d1c:	d101      	bne.n	8001d22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d44:	f043 0201 	orr.w	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d6c:	f043 0202 	orr.w	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <LL_ADC_IsEnabled+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_ADC_IsEnabled+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d101      	bne.n	8001dbe <LL_ADC_IsDisableOngoing+0x18>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <LL_ADC_IsDisableOngoing+0x1a>
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ddc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001de0:	f043 0204 	orr.w	r2, r3, #4
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1a9      	b.n	80021ae <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fb87 	bl	800157c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff19 	bl	8001cb8 <LL_ADC_IsDeepPowerDownEnabled>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff feff 	bl	8001c94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff34 	bl	8001d08 <LL_ADC_IsInternalRegulatorEnabled>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d115      	bne.n	8001ed2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff18 	bl	8001ce0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eb0:	4b9c      	ldr	r3, [pc, #624]	; (8002124 <HAL_ADC_Init+0x2e4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	4a9c      	ldr	r2, [pc, #624]	; (8002128 <HAL_ADC_Init+0x2e8>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff16 	bl	8001d08 <LL_ADC_IsInternalRegulatorEnabled>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff76 	bl	8001df4 <LL_ADC_REG_IsConversionOngoing>
 8001f08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 8142 	bne.w	800219c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 813e 	bne.w	800219c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f28:	f043 0202 	orr.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff23 	bl	8001d80 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d141      	bne.n	8001fc4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f48:	d004      	beq.n	8001f54 <HAL_ADC_Init+0x114>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a77      	ldr	r2, [pc, #476]	; (800212c <HAL_ADC_Init+0x2ec>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10f      	bne.n	8001f74 <HAL_ADC_Init+0x134>
 8001f54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f58:	f7ff ff12 	bl	8001d80 <LL_ADC_IsEnabled>
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	4873      	ldr	r0, [pc, #460]	; (800212c <HAL_ADC_Init+0x2ec>)
 8001f60:	f7ff ff0e 	bl	8001d80 <LL_ADC_IsEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4323      	orrs	r3, r4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e012      	b.n	8001f9a <HAL_ADC_Init+0x15a>
 8001f74:	486e      	ldr	r0, [pc, #440]	; (8002130 <HAL_ADC_Init+0x2f0>)
 8001f76:	f7ff ff03 	bl	8001d80 <LL_ADC_IsEnabled>
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	486d      	ldr	r0, [pc, #436]	; (8002134 <HAL_ADC_Init+0x2f4>)
 8001f7e:	f7ff feff 	bl	8001d80 <LL_ADC_IsEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	431c      	orrs	r4, r3
 8001f86:	486c      	ldr	r0, [pc, #432]	; (8002138 <HAL_ADC_Init+0x2f8>)
 8001f88:	f7ff fefa 	bl	8001d80 <LL_ADC_IsEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4323      	orrs	r3, r4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa6:	d004      	beq.n	8001fb2 <HAL_ADC_Init+0x172>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a5f      	ldr	r2, [pc, #380]	; (800212c <HAL_ADC_Init+0x2ec>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Init+0x176>
 8001fb2:	4a62      	ldr	r2, [pc, #392]	; (800213c <HAL_ADC_Init+0x2fc>)
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADC_Init+0x178>
 8001fb6:	4a62      	ldr	r2, [pc, #392]	; (8002140 <HAL_ADC_Init+0x300>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f7ff fcfa 	bl	80019b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7f5b      	ldrb	r3, [r3, #29]
 8001fc8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fd4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fda:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d106      	bne.n	8002000 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	045b      	lsls	r3, r3, #17
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_ADC_Init+0x304>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	430b      	orrs	r3, r1
 800202e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fee5 	bl	8001e1a <LL_ADC_INJ_IsConversionOngoing>
 8002050:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d17f      	bne.n	8002158 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d17c      	bne.n	8002158 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002062:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800206a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800207a:	f023 0302 	bic.w	r3, r3, #2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	69b9      	ldr	r1, [r7, #24]
 8002084:	430b      	orrs	r3, r1
 8002086:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d017      	beq.n	80020c0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800209e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6911      	ldr	r1, [r2, #16]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020be:	e013      	b.n	80020e8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d12a      	bne.n	8002148 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002114:	430a      	orrs	r2, r1
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	611a      	str	r2, [r3, #16]
 8002122:	e019      	b.n	8002158 <HAL_ADC_Init+0x318>
 8002124:	20000040 	.word	0x20000040
 8002128:	053e2d63 	.word	0x053e2d63
 800212c:	50000100 	.word	0x50000100
 8002130:	50000400 	.word	0x50000400
 8002134:	50000500 	.word	0x50000500
 8002138:	50000600 	.word	0x50000600
 800213c:	50000300 	.word	0x50000300
 8002140:	50000700 	.word	0x50000700
 8002144:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d10c      	bne.n	800217a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f023 010f 	bic.w	r1, r3, #15
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	1e5a      	subs	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
 8002178:	e007      	b.n	800218a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 020f 	bic.w	r2, r2, #15
 8002188:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	65da      	str	r2, [r3, #92]	; 0x5c
 800219a:	e007      	b.n	80021ac <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	f043 0210 	orr.w	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	bf00      	nop

080021b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021cc:	d004      	beq.n	80021d8 <HAL_ADC_Start_DMA+0x20>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5a      	ldr	r2, [pc, #360]	; (800233c <HAL_ADC_Start_DMA+0x184>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_Start_DMA+0x24>
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_ADC_Start_DMA+0x188>)
 80021da:	e000      	b.n	80021de <HAL_ADC_Start_DMA+0x26>
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_ADC_Start_DMA+0x18c>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fd4a 	bl	8001c78 <LL_ADC_GetMultimode>
 80021e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fe02 	bl	8001df4 <LL_ADC_REG_IsConversionOngoing>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 809b 	bne.w	800232e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_ADC_Start_DMA+0x4e>
 8002202:	2302      	movs	r3, #2
 8002204:	e096      	b.n	8002334 <HAL_ADC_Start_DMA+0x17c>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a4d      	ldr	r2, [pc, #308]	; (8002348 <HAL_ADC_Start_DMA+0x190>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d008      	beq.n	800222a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d002      	beq.n	800222a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b09      	cmp	r3, #9
 8002228:	d17a      	bne.n	8002320 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fcf6 	bl	8002c1c <ADC_Enable>
 8002230:	4603      	mov	r3, r0
 8002232:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d16d      	bne.n	8002316 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a3a      	ldr	r2, [pc, #232]	; (800233c <HAL_ADC_Start_DMA+0x184>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d009      	beq.n	800226c <HAL_ADC_Start_DMA+0xb4>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a3b      	ldr	r2, [pc, #236]	; (800234c <HAL_ADC_Start_DMA+0x194>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d002      	beq.n	8002268 <HAL_ADC_Start_DMA+0xb0>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e003      	b.n	8002270 <HAL_ADC_Start_DMA+0xb8>
 8002268:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_ADC_Start_DMA+0x198>)
 800226a:	e001      	b.n	8002270 <HAL_ADC_Start_DMA+0xb8>
 800226c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	4293      	cmp	r3, r2
 8002276:	d002      	beq.n	800227e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	f023 0206 	bic.w	r2, r3, #6
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	661a      	str	r2, [r3, #96]	; 0x60
 80022a2:	e002      	b.n	80022aa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	4a29      	ldr	r2, [pc, #164]	; (8002354 <HAL_ADC_Start_DMA+0x19c>)
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_ADC_Start_DMA+0x1a0>)
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	4a27      	ldr	r2, [pc, #156]	; (800235c <HAL_ADC_Start_DMA+0x1a4>)
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	221c      	movs	r2, #28
 80022c8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0210 	orr.w	r2, r2, #16
 80022e0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3340      	adds	r3, #64	; 0x40
 80022fc:	4619      	mov	r1, r3
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f001 fbfd 	bl	8003b00 <HAL_DMA_Start_IT>
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fd5c 	bl	8001dcc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002314:	e00d      	b.n	8002332 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800231e:	e008      	b.n	8002332 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800232c:	e001      	b.n	8002332 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800232e:	2302      	movs	r3, #2
 8002330:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	50000100 	.word	0x50000100
 8002340:	50000300 	.word	0x50000300
 8002344:	50000700 	.word	0x50000700
 8002348:	50000600 	.word	0x50000600
 800234c:	50000500 	.word	0x50000500
 8002350:	50000400 	.word	0x50000400
 8002354:	08002e07 	.word	0x08002e07
 8002358:	08002edf 	.word	0x08002edf
 800235c:	08002efb 	.word	0x08002efb

08002360 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b0b6      	sub	sp, #216	; 0xd8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x24>
 80023ba:	2302      	movs	r3, #2
 80023bc:	f000 bc13 	b.w	8002be6 <HAL_ADC_ConfigChannel+0x84a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fd11 	bl	8001df4 <LL_ADC_REG_IsConversionOngoing>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 83f3 	bne.w	8002bc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f7ff fbcb 	bl	8001b82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fcff 	bl	8001df4 <LL_ADC_REG_IsConversionOngoing>
 80023f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fd0b 	bl	8001e1a <LL_ADC_INJ_IsConversionOngoing>
 8002404:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002408:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 81d9 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002412:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 81d4 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002424:	d10f      	bne.n	8002446 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	4619      	mov	r1, r3
 8002432:	f7ff fbd2 	bl	8001bda <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb79 	bl	8001b36 <LL_ADC_SetSamplingTimeCommonConfig>
 8002444:	e00e      	b.n	8002464 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	461a      	mov	r2, r3
 8002454:	f7ff fbc1 	bl	8001bda <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fb69 	bl	8001b36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d022      	beq.n	80024cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002496:	f7ff fac3 	bl	8001a20 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f7ff fb0f 	bl	8001aca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d102      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x126>
 80024bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c0:	e000      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x128>
 80024c2:	2300      	movs	r3, #0
 80024c4:	461a      	mov	r2, r3
 80024c6:	f7ff fb1b 	bl	8001b00 <LL_ADC_SetOffsetSaturation>
 80024ca:	e17b      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fac8 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x15c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fabd 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 021f 	and.w	r2, r3, #31
 80024f6:	e01e      	b.n	8002536 <HAL_ADC_ConfigChannel+0x19a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fab2 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800251a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800251e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e004      	b.n	8002534 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800252a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_ADC_ConfigChannel+0x1b2>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	e018      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1e4>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800256a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e004      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fa81 	bl	8001a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2101      	movs	r1, #1
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fa65 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x222>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fa5a 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	e01e      	b.n	80025fc <HAL_ADC_ConfigChannel+0x260>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2101      	movs	r1, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fa4f 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e004      	b.n	80025fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80025f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x278>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	e018      	b.n	8002646 <HAL_ADC_ConfigChannel+0x2aa>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002628:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800262c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e004      	b.n	8002646 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800263c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002646:	429a      	cmp	r2, r3
 8002648:	d106      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fa1e 	bl	8001a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2102      	movs	r1, #2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fa02 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x2e8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2102      	movs	r1, #2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff f9f7 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	f003 021f 	and.w	r2, r3, #31
 8002682:	e01e      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x326>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f9ec 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80026a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80026aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80026b2:	2320      	movs	r3, #32
 80026b4:	e004      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80026b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_ADC_ConfigChannel+0x33e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	e016      	b.n	8002708 <HAL_ADC_ConfigChannel+0x36c>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e004      	b.n	8002708 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80026fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	2102      	movs	r1, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f9bd 	bl	8001a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2103      	movs	r1, #3
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f9a1 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x3aa>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2103      	movs	r1, #3
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f996 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	e017      	b.n	8002776 <HAL_ADC_ConfigChannel+0x3da>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2103      	movs	r1, #3
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f98b 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800275e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002760:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e003      	b.n	8002774 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800276c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_ConfigChannel+0x3f2>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	e011      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x416>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800279c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800279e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80027a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e003      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d106      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2103      	movs	r1, #3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f968 	bl	8001a94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fad9 	bl	8001d80 <LL_ADC_IsEnabled>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 813d 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f7ff fa24 	bl	8001c30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4aa2      	ldr	r2, [pc, #648]	; (8002a78 <HAL_ADC_ConfigChannel+0x6dc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 812e 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_ADC_ConfigChannel+0x480>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	3301      	adds	r3, #1
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b09      	cmp	r3, #9
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e019      	b.n	8002850 <HAL_ADC_ConfigChannel+0x4b4>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800282a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800282e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2b09      	cmp	r3, #9
 8002848:	bf94      	ite	ls
 800284a:	2301      	movls	r3, #1
 800284c:	2300      	movhi	r3, #0
 800284e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002850:	2b00      	cmp	r3, #0
 8002852:	d079      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x4d4>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	3301      	adds	r3, #1
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800286e:	e015      	b.n	800289c <HAL_ADC_ConfigChannel+0x500>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800287e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002880:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002888:	2320      	movs	r3, #32
 800288a:	e003      	b.n	8002894 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x520>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	e017      	b.n	80028ec <HAL_ADC_ConfigChannel+0x550>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e003      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80028d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x576>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	3301      	adds	r3, #1
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	051b      	lsls	r3, r3, #20
 8002910:	e018      	b.n	8002944 <HAL_ADC_ConfigChannel+0x5a8>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800292e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002944:	430b      	orrs	r3, r1
 8002946:	e07e      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x5c8>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0e9b      	lsrs	r3, r3, #26
 800295a:	3301      	adds	r3, #1
 800295c:	069b      	lsls	r3, r3, #26
 800295e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002962:	e015      	b.n	8002990 <HAL_ADC_ConfigChannel+0x5f4>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e003      	b.n	8002988 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	069b      	lsls	r3, r3, #26
 800298c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x614>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	3301      	adds	r3, #1
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	2101      	movs	r1, #1
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	e017      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x644>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	61fb      	str	r3, [r7, #28]
  return result;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	ea42 0103 	orr.w	r1, r2, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10d      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x670>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	3b1e      	subs	r3, #30
 8002a04:	051b      	lsls	r3, r3, #20
 8002a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	e01b      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x6a8>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	613b      	str	r3, [r7, #16]
  return result;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e003      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b1e      	subs	r3, #30
 8002a3e:	051b      	lsls	r3, r3, #20
 8002a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7ff f8c5 	bl	8001bda <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_ADC_ConfigChannel+0x6e0>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80be 	beq.w	8002bda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_ConfigChannel+0x6d6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10a      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x6ec>
 8002a72:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a74:	e009      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x6ee>
 8002a76:	bf00      	nop
 8002a78:	407f0000 	.word	0x407f0000
 8002a7c:	80080000 	.word	0x80080000
 8002a80:	50000100 	.word	0x50000100
 8002a84:	50000300 	.word	0x50000300
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_ADC_ConfigChannel+0x854>)
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe ffba 	bl	8001a04 <LL_ADC_GetCommonPathInternalCh>
 8002a90:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a56      	ldr	r2, [pc, #344]	; (8002bf4 <HAL_ADC_ConfigChannel+0x858>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x70c>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a55      	ldr	r2, [pc, #340]	; (8002bf8 <HAL_ADC_ConfigChannel+0x85c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d13a      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d134      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002abc:	d005      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x72e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4e      	ldr	r2, [pc, #312]	; (8002bfc <HAL_ADC_ConfigChannel+0x860>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	f040 8085 	bne.w	8002bd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad2:	d004      	beq.n	8002ade <HAL_ADC_ConfigChannel+0x742>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a49      	ldr	r2, [pc, #292]	; (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x746>
 8002ade:	4a49      	ldr	r2, [pc, #292]	; (8002c04 <HAL_ADC_ConfigChannel+0x868>)
 8002ae0:	e000      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x748>
 8002ae2:	4a43      	ldr	r2, [pc, #268]	; (8002bf0 <HAL_ADC_ConfigChannel+0x854>)
 8002ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f7fe ff75 	bl	80019de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af4:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <HAL_ADC_ConfigChannel+0x86c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	4a44      	ldr	r2, [pc, #272]	; (8002c0c <HAL_ADC_ConfigChannel+0x870>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b0e:	e002      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f9      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b1c:	e05a      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a3b      	ldr	r2, [pc, #236]	; (8002c10 <HAL_ADC_ConfigChannel+0x874>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d125      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11f      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a31      	ldr	r2, [pc, #196]	; (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d104      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x7ac>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <HAL_ADC_ConfigChannel+0x878>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d047      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x7c0>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x7c4>
 8002b5c:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <HAL_ADC_ConfigChannel+0x868>)
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x7c6>
 8002b60:	4a23      	ldr	r2, [pc, #140]	; (8002bf0 <HAL_ADC_ConfigChannel+0x854>)
 8002b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f7fe ff36 	bl	80019de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b72:	e031      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <HAL_ADC_ConfigChannel+0x87c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12d      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d127      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b9c:	d004      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x80c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_ADC_ConfigChannel+0x864>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x810>
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_ADC_ConfigChannel+0x868>)
 8002baa:	e000      	b.n	8002bae <HAL_ADC_ConfigChannel+0x812>
 8002bac:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <HAL_ADC_ConfigChannel+0x854>)
 8002bae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f7fe ff10 	bl	80019de <LL_ADC_SetCommonPathInternalCh>
 8002bbe:	e00c      	b.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bd2:	e002      	b.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002be2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	37d8      	adds	r7, #216	; 0xd8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	50000700 	.word	0x50000700
 8002bf4:	c3210000 	.word	0xc3210000
 8002bf8:	90c00010 	.word	0x90c00010
 8002bfc:	50000600 	.word	0x50000600
 8002c00:	50000100 	.word	0x50000100
 8002c04:	50000300 	.word	0x50000300
 8002c08:	20000040 	.word	0x20000040
 8002c0c:	053e2d63 	.word	0x053e2d63
 8002c10:	c7520000 	.word	0xc7520000
 8002c14:	50000500 	.word	0x50000500
 8002c18:	cb840000 	.word	0xcb840000

08002c1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f8a7 	bl	8001d80 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d176      	bne.n	8002d26 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b3c      	ldr	r3, [pc, #240]	; (8002d30 <ADC_Enable+0x114>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e062      	b.n	8002d28 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f862 	bl	8001d30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c74:	d004      	beq.n	8002c80 <ADC_Enable+0x64>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2e      	ldr	r2, [pc, #184]	; (8002d34 <ADC_Enable+0x118>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d101      	bne.n	8002c84 <ADC_Enable+0x68>
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <ADC_Enable+0x11c>)
 8002c82:	e000      	b.n	8002c86 <ADC_Enable+0x6a>
 8002c84:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <ADC_Enable+0x120>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe febc 	bl	8001a04 <LL_ADC_GetCommonPathInternalCh>
 8002c8c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d013      	beq.n	8002cbe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c96:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <ADC_Enable+0x124>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <ADC_Enable+0x128>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cb0:	e002      	b.n	8002cb8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cbe:	f7fe fe6f 	bl	80019a0 <HAL_GetTick>
 8002cc2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc4:	e028      	b.n	8002d18 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff f858 	bl	8001d80 <LL_ADC_IsEnabled>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f828 	bl	8001d30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ce0:	f7fe fe5e 	bl	80019a0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d914      	bls.n	8002d18 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d00d      	beq.n	8002d18 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d1cf      	bne.n	8002cc6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	8000003f 	.word	0x8000003f
 8002d34:	50000100 	.word	0x50000100
 8002d38:	50000300 	.word	0x50000300
 8002d3c:	50000700 	.word	0x50000700
 8002d40:	20000040 	.word	0x20000040
 8002d44:	053e2d63 	.word	0x053e2d63

08002d48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f826 	bl	8001da6 <LL_ADC_IsDisableOngoing>
 8002d5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f80d 	bl	8001d80 <LL_ADC_IsEnabled>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d047      	beq.n	8002dfc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d144      	bne.n	8002dfc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 030d 	and.w	r3, r3, #13
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d10c      	bne.n	8002d9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe ffe7 	bl	8001d58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2203      	movs	r2, #3
 8002d90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d92:	f7fe fe05 	bl	80019a0 <HAL_GetTick>
 8002d96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d98:	e029      	b.n	8002dee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e023      	b.n	8002dfe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002db6:	f7fe fdf3 	bl	80019a0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d914      	bls.n	8002dee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	f043 0210 	orr.w	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e007      	b.n	8002dfe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1dc      	bne.n	8002db6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d14b      	bne.n	8002eb8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d021      	beq.n	8002e7e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fe8c 	bl	8001b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d032      	beq.n	8002eb0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d12b      	bne.n	8002eb0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11f      	bne.n	8002eb0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	f043 0201 	orr.w	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e7c:	e018      	b.n	8002eb0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d111      	bne.n	8002eb0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fa55 	bl	8002360 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eb6:	e00e      	b.n	8002ed6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fa5f 	bl	8002388 <HAL_ADC_ErrorCallback>
}
 8002eca:	e004      	b.n	8002ed6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff fa41 	bl	8002374 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7ff fa31 	bl	8002388 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <LL_ADC_IsEnabled>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <LL_ADC_IsEnabled+0x18>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_ADC_IsEnabled+0x1a>
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_StartCalibration>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	609a      	str	r2, [r3, #8]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f9a:	d101      	bne.n	8002fa0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_ADC_REG_IsConversionOngoing>:
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d101      	bne.n	8002fc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e04d      	b.n	800308c <HAL_ADCEx_Calibration_Start+0xb8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fea5 	bl	8002d48 <ADC_Disable>
 8002ffe:	4603      	mov	r3, r0
 8003000:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d136      	bne.n	8003076 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003010:	f023 0302 	bic.w	r3, r3, #2
 8003014:	f043 0202 	orr.w	r2, r3, #2
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6839      	ldr	r1, [r7, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff96 	bl	8002f54 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003028:	e014      	b.n	8003054 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3301      	adds	r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d90d      	bls.n	8003054 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	f023 0312 	bic.w	r3, r3, #18
 8003040:	f043 0210 	orr.w	r2, r3, #16
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e01b      	b.n	800308c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff94 	bl	8002f86 <LL_ADC_IsCalibrationOnGoing>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e2      	bne.n	800302a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f023 0303 	bic.w	r3, r3, #3
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	65da      	str	r2, [r3, #92]	; 0x5c
 8003074:	e005      	b.n	8003082 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	f043 0210 	orr.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0004de01 	.word	0x0004de01

08003098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b0a1      	sub	sp, #132	; 0x84
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e0e7      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030be:	2300      	movs	r3, #0
 80030c0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030c2:	2300      	movs	r3, #0
 80030c4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ce:	d102      	bne.n	80030d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030d0:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	e009      	b.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6e      	ldr	r2, [pc, #440]	; (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d102      	bne.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80030e0:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	e001      	b.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0be      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff4f 	bl	8002fae <LL_ADC_REG_IsConversionOngoing>
 8003110:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff49 	bl	8002fae <LL_ADC_REG_IsConversionOngoing>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 80a0 	bne.w	8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 809c 	bne.w	8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003134:	d004      	beq.n	8003140 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a55      	ldr	r2, [pc, #340]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003140:	4b56      	ldr	r3, [pc, #344]	; (800329c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003142:	e000      	b.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003144:	4b56      	ldr	r3, [pc, #344]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003146:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d04b      	beq.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003162:	035b      	lsls	r3, r3, #13
 8003164:	430b      	orrs	r3, r1
 8003166:	431a      	orrs	r2, r3
 8003168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800316a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003174:	d004      	beq.n	8003180 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a45      	ldr	r2, [pc, #276]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10f      	bne.n	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003180:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003184:	f7ff fed3 	bl	8002f2e <LL_ADC_IsEnabled>
 8003188:	4604      	mov	r4, r0
 800318a:	4841      	ldr	r0, [pc, #260]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800318c:	f7ff fecf 	bl	8002f2e <LL_ADC_IsEnabled>
 8003190:	4603      	mov	r3, r0
 8003192:	4323      	orrs	r3, r4
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e012      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80031a0:	483c      	ldr	r0, [pc, #240]	; (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031a2:	f7ff fec4 	bl	8002f2e <LL_ADC_IsEnabled>
 80031a6:	4604      	mov	r4, r0
 80031a8:	483b      	ldr	r0, [pc, #236]	; (8003298 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031aa:	f7ff fec0 	bl	8002f2e <LL_ADC_IsEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	431c      	orrs	r4, r3
 80031b2:	483c      	ldr	r0, [pc, #240]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80031b4:	f7ff febb 	bl	8002f2e <LL_ADC_IsEnabled>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4323      	orrs	r3, r4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d056      	beq.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031d2:	f023 030f 	bic.w	r3, r3, #15
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	6811      	ldr	r1, [r2, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	6892      	ldr	r2, [r2, #8]
 80031de:	430a      	orrs	r2, r1
 80031e0:	431a      	orrs	r2, r3
 80031e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031e6:	e047      	b.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031fc:	d004      	beq.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10f      	bne.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003208:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800320c:	f7ff fe8f 	bl	8002f2e <LL_ADC_IsEnabled>
 8003210:	4604      	mov	r4, r0
 8003212:	481f      	ldr	r0, [pc, #124]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003214:	f7ff fe8b 	bl	8002f2e <LL_ADC_IsEnabled>
 8003218:	4603      	mov	r3, r0
 800321a:	4323      	orrs	r3, r4
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e012      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003228:	481a      	ldr	r0, [pc, #104]	; (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800322a:	f7ff fe80 	bl	8002f2e <LL_ADC_IsEnabled>
 800322e:	4604      	mov	r4, r0
 8003230:	4819      	ldr	r0, [pc, #100]	; (8003298 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003232:	f7ff fe7c 	bl	8002f2e <LL_ADC_IsEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	431c      	orrs	r4, r3
 800323a:	481a      	ldr	r0, [pc, #104]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800323c:	f7ff fe77 	bl	8002f2e <LL_ADC_IsEnabled>
 8003240:	4603      	mov	r3, r0
 8003242:	4323      	orrs	r3, r4
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800325a:	f023 030f 	bic.w	r3, r3, #15
 800325e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003260:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003262:	e009      	b.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003276:	e000      	b.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003278:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003282:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003286:	4618      	mov	r0, r3
 8003288:	3784      	adds	r7, #132	; 0x84
 800328a:	46bd      	mov	sp, r7
 800328c:	bd90      	pop	{r4, r7, pc}
 800328e:	bf00      	nop
 8003290:	50000100 	.word	0x50000100
 8003294:	50000400 	.word	0x50000400
 8003298:	50000500 	.word	0x50000500
 800329c:	50000300 	.word	0x50000300
 80032a0:	50000700 	.word	0x50000700
 80032a4:	50000600 	.word	0x50000600

080032a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032da:	4a04      	ldr	r2, [pc, #16]	; (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60d3      	str	r3, [r2, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <__NVIC_GetPriorityGrouping+0x18>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 0307 	and.w	r3, r3, #7
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db0b      	blt.n	8003336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <__NVIC_EnableIRQ+0x38>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000e100 	.word	0xe000e100

08003348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	; (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	; (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
         );
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff29 	bl	80032a8 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800346c:	f7ff ff40 	bl	80032f0 <__NVIC_GetPriorityGrouping>
 8003470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	6978      	ldr	r0, [r7, #20]
 8003478:	f7ff ff90 	bl	800339c <NVIC_EncodePriority>
 800347c:	4602      	mov	r2, r0
 800347e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff5f 	bl	8003348 <__NVIC_SetPriority>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff33 	bl	800330c <__NVIC_EnableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ffa4 	bl	8003404 <SysTick_Config>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e014      	b.n	8003502 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	791b      	ldrb	r3, [r3, #4]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7fe f8c9 	bl	8001680 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e056      	b.n	80035ce <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	795b      	ldrb	r3, [r3, #5]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_DAC_Start+0x20>
 8003528:	2302      	movs	r3, #2
 800352a:	e050      	b.n	80035ce <HAL_DAC_Start+0xc2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2201      	movs	r2, #1
 8003546:	409a      	lsls	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <HAL_DAC_Start+0xd0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_DAC_Start+0xd4>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	3301      	adds	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003562:	e002      	b.n	800356a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3b01      	subs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f9      	bne.n	8003564 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003580:	2b02      	cmp	r3, #2
 8003582:	d11d      	bne.n	80035c0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	e014      	b.n	80035c0 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2102      	movs	r1, #2
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d107      	bne.n	80035c0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0202 	orr.w	r2, r2, #2
 80035be:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000040 	.word	0x20000040
 80035e0:	053e2d63 	.word	0x053e2d63

080035e4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e018      	b.n	8003632 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d105      	bne.n	800361e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	3308      	adds	r3, #8
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e004      	b.n	8003628 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	3314      	adds	r3, #20
 8003626:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	461a      	mov	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_DAC_ConfigChannel+0x1c>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e19e      	b.n	800399e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	795b      	ldrb	r3, [r3, #5]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_DAC_ConfigChannel+0x2c>
 8003668:	2302      	movs	r3, #2
 800366a:	e198      	b.n	800399e <HAL_DAC_ConfigChannel+0x35e>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2202      	movs	r2, #2
 8003676:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d17a      	bne.n	8003776 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003680:	f7fe f98e 	bl	80019a0 <HAL_GetTick>
 8003684:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d13d      	bne.n	8003708 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800368c:	e018      	b.n	80036c0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800368e:	f7fe f987 	bl	80019a0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d911      	bls.n	80036c0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f043 0208 	orr.w	r2, r3, #8
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2203      	movs	r2, #3
 80036ba:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e16e      	b.n	800399e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1df      	bne.n	800368e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
 80036d8:	e020      	b.n	800371c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036da:	f7fe f961 	bl	80019a0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d90f      	bls.n	8003708 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da0a      	bge.n	8003708 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f043 0208 	orr.w	r2, r3, #8
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2203      	movs	r2, #3
 8003702:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e14a      	b.n	800399e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	2b00      	cmp	r3, #0
 8003710:	dbe3      	blt.n	80036da <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	ea02 0103 	and.w	r1, r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	409a      	lsls	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	21ff      	movs	r1, #255	; 0xff
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	ea02 0103 	and.w	r1, r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	409a      	lsls	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d11d      	bne.n	80037ba <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	221f      	movs	r2, #31
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003796:	4013      	ands	r3, r2
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ae:	4313      	orrs	r3, r2
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2207      	movs	r2, #7
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d2:	4013      	ands	r3, r2
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d102      	bne.n	80037e4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80037de:	2300      	movs	r3, #0
 80037e0:	623b      	str	r3, [r7, #32]
 80037e2:	e00f      	b.n	8003804 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d102      	bne.n	80037f2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80037ec:	2301      	movs	r3, #1
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	e008      	b.n	8003804 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80037fa:	2301      	movs	r3, #1
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	e001      	b.n	8003804 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003800:	2300      	movs	r3, #0
 8003802:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	6a3a      	ldr	r2, [r7, #32]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003826:	4013      	ands	r3, r2
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	791b      	ldrb	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d102      	bne.n	8003838 <HAL_DAC_ConfigChannel+0x1f8>
 8003832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003836:	e000      	b.n	800383a <HAL_DAC_ConfigChannel+0x1fa>
 8003838:	2300      	movs	r3, #0
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	4013      	ands	r3, r2
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	795b      	ldrb	r3, [r3, #5]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d102      	bne.n	8003864 <HAL_DAC_ConfigChannel+0x224>
 800385e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003862:	e000      	b.n	8003866 <HAL_DAC_ConfigChannel+0x226>
 8003864:	2300      	movs	r3, #0
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d114      	bne.n	80038a6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800387c:	f001 fa2c 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8003880:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4a48      	ldr	r2, [pc, #288]	; (80039a8 <HAL_DAC_ConfigChannel+0x368>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d904      	bls.n	8003894 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	e00f      	b.n	80038b4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4a45      	ldr	r2, [pc, #276]	; (80039ac <HAL_DAC_ConfigChannel+0x36c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d90a      	bls.n	80038b2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
 80038a4:	e006      	b.n	80038b4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ac:	4313      	orrs	r3, r2
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	e000      	b.n	80038b4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80038b2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c2:	4313      	orrs	r3, r2
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43da      	mvns	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	400a      	ands	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	4013      	ands	r3, r2
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	4313      	orrs	r3, r2
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003928:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	22c0      	movs	r2, #192	; 0xc0
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43da      	mvns	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	400a      	ands	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	ea02 0103 	and.w	r1, r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	409a      	lsls	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800399c:	7ffb      	ldrb	r3, [r7, #31]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3728      	adds	r7, #40	; 0x28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	09896800 	.word	0x09896800
 80039ac:	04c4b400 	.word	0x04c4b400

080039b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e08d      	b.n	8003ade <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_DMA_Init+0x138>)
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d80f      	bhi.n	80039ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b45      	ldr	r3, [pc, #276]	; (8003aec <HAL_DMA_Init+0x13c>)
 80039d6:	4413      	add	r3, r2
 80039d8:	4a45      	ldr	r2, [pc, #276]	; (8003af0 <HAL_DMA_Init+0x140>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	009a      	lsls	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_DMA_Init+0x144>)
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
 80039ec:	e00e      	b.n	8003a0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b40      	ldr	r3, [pc, #256]	; (8003af8 <HAL_DMA_Init+0x148>)
 80039f6:	4413      	add	r3, r2
 80039f8:	4a3d      	ldr	r2, [pc, #244]	; (8003af0 <HAL_DMA_Init+0x140>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	009a      	lsls	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a3c      	ldr	r2, [pc, #240]	; (8003afc <HAL_DMA_Init+0x14c>)
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f9b6 	bl	8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a6c:	d102      	bne.n	8003a74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d010      	beq.n	8003ab4 <HAL_DMA_Init+0x104>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d80c      	bhi.n	8003ab4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f9d6 	bl	8003e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	e008      	b.n	8003ac6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40020407 	.word	0x40020407
 8003aec:	bffdfff8 	.word	0xbffdfff8
 8003af0:	cccccccd 	.word	0xcccccccd
 8003af4:	40020000 	.word	0x40020000
 8003af8:	bffdfbf8 	.word	0xbffdfbf8
 8003afc:	40020400 	.word	0x40020400

08003b00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_DMA_Start_IT+0x20>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e066      	b.n	8003bee <HAL_DMA_Start_IT+0xee>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d155      	bne.n	8003be0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f8fb 	bl	8003d54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 020e 	orr.w	r2, r2, #14
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e00f      	b.n	8003b98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0204 	bic.w	r2, r2, #4
 8003b86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 020a 	orr.w	r2, r2, #10
 8003b96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e005      	b.n	8003bec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
 8003bea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2204      	movs	r2, #4
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d026      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x7a>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d021      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0204 	bic.w	r2, r2, #4
 8003c48:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f003 021f 	and.w	r2, r3, #31
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2104      	movs	r1, #4
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d071      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c6e:	e06c      	b.n	8003d4a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2202      	movs	r2, #2
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02e      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d029      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 020a 	bic.w	r2, r2, #10
 8003caa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d038      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ce0:	e033      	b.n	8003d4a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2208      	movs	r2, #8
 8003cec:	409a      	lsls	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d02a      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d025      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 020e 	bic.w	r2, r2, #14
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	f003 021f 	and.w	r2, r3, #31
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
}
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d7c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	f003 021f 	and.w	r2, r3, #31
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d108      	bne.n	8003db4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003db2:	e007      	b.n	8003dc4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d802      	bhi.n	8003dea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003de4:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e001      	b.n	8003dee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003dec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3b08      	subs	r3, #8
 8003dfa:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	009a      	lsls	r2, r3, #2
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2201      	movs	r2, #1
 8003e24:	409a      	lsls	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40020407 	.word	0x40020407
 8003e3c:	40020800 	.word	0x40020800
 8003e40:	40020820 	.word	0x40020820
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	40020880 	.word	0x40020880

08003e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e6e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	1000823f 	.word	0x1000823f
 8003e90:	40020940 	.word	0x40020940

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ea2:	e15a      	b.n	800415a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 814c 	beq.w	8004154 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d005      	beq.n	8003ed4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d130      	bne.n	8003f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	f003 0201 	and.w	r2, r3, #1
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d017      	beq.n	8003f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d123      	bne.n	8003fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	08da      	lsrs	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3208      	adds	r2, #8
 8003f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	220f      	movs	r2, #15
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	6939      	ldr	r1, [r7, #16]
 8003fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0203 	and.w	r2, r3, #3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a6 	beq.w	8004154 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004008:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <HAL_GPIO_Init+0x2e4>)
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	4a5a      	ldr	r2, [pc, #360]	; (8004178 <HAL_GPIO_Init+0x2e4>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6613      	str	r3, [r2, #96]	; 0x60
 8004014:	4b58      	ldr	r3, [pc, #352]	; (8004178 <HAL_GPIO_Init+0x2e4>)
 8004016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004020:	4a56      	ldr	r2, [pc, #344]	; (800417c <HAL_GPIO_Init+0x2e8>)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	3302      	adds	r3, #2
 8004028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	220f      	movs	r2, #15
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800404a:	d01f      	beq.n	800408c <HAL_GPIO_Init+0x1f8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a4c      	ldr	r2, [pc, #304]	; (8004180 <HAL_GPIO_Init+0x2ec>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d019      	beq.n	8004088 <HAL_GPIO_Init+0x1f4>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a4b      	ldr	r2, [pc, #300]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_GPIO_Init+0x1f0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a4a      	ldr	r2, [pc, #296]	; (8004188 <HAL_GPIO_Init+0x2f4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00d      	beq.n	8004080 <HAL_GPIO_Init+0x1ec>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a49      	ldr	r2, [pc, #292]	; (800418c <HAL_GPIO_Init+0x2f8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <HAL_GPIO_Init+0x1e8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a48      	ldr	r2, [pc, #288]	; (8004190 <HAL_GPIO_Init+0x2fc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_GPIO_Init+0x1e4>
 8004074:	2305      	movs	r3, #5
 8004076:	e00a      	b.n	800408e <HAL_GPIO_Init+0x1fa>
 8004078:	2306      	movs	r3, #6
 800407a:	e008      	b.n	800408e <HAL_GPIO_Init+0x1fa>
 800407c:	2304      	movs	r3, #4
 800407e:	e006      	b.n	800408e <HAL_GPIO_Init+0x1fa>
 8004080:	2303      	movs	r3, #3
 8004082:	e004      	b.n	800408e <HAL_GPIO_Init+0x1fa>
 8004084:	2302      	movs	r3, #2
 8004086:	e002      	b.n	800408e <HAL_GPIO_Init+0x1fa>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_GPIO_Init+0x1fa>
 800408c:	2300      	movs	r3, #0
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	f002 0203 	and.w	r2, r2, #3
 8004094:	0092      	lsls	r2, r2, #2
 8004096:	4093      	lsls	r3, r2
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800409e:	4937      	ldr	r1, [pc, #220]	; (800417c <HAL_GPIO_Init+0x2e8>)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	3302      	adds	r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040ac:	4b39      	ldr	r3, [pc, #228]	; (8004194 <HAL_GPIO_Init+0x300>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040d0:	4a30      	ldr	r2, [pc, #192]	; (8004194 <HAL_GPIO_Init+0x300>)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040d6:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <HAL_GPIO_Init+0x300>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040fa:	4a26      	ldr	r2, [pc, #152]	; (8004194 <HAL_GPIO_Init+0x300>)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_GPIO_Init+0x300>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	43db      	mvns	r3, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004124:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_GPIO_Init+0x300>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <HAL_GPIO_Init+0x300>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <HAL_GPIO_Init+0x300>)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	3301      	adds	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f ae9d 	bne.w	8003ea4 <HAL_GPIO_Init+0x10>
  }
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40021000 	.word	0x40021000
 800417c:	40010000 	.word	0x40010000
 8004180:	48000400 	.word	0x48000400
 8004184:	48000800 	.word	0x48000800
 8004188:	48000c00 	.word	0x48000c00
 800418c:	48001000 	.word	0x48001000
 8004190:	48001400 	.word	0x48001400
 8004194:	40010400 	.word	0x40010400

08004198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
 80041a4:	4613      	mov	r3, r2
 80041a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041a8:	787b      	ldrb	r3, [r7, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041b4:	e002      	b.n	80041bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041d2:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041de:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f806 	bl	80041f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40010400 	.word	0x40010400

080041f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d141      	bne.n	80042a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800421e:	4b4b      	ldr	r3, [pc, #300]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422a:	d131      	bne.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800422c:	4b47      	ldr	r3, [pc, #284]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004232:	4a46      	ldr	r2, [pc, #280]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800423c:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004244:	4a41      	ldr	r2, [pc, #260]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800424c:	4b40      	ldr	r3, [pc, #256]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2232      	movs	r2, #50	; 0x32
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	4a3f      	ldr	r2, [pc, #252]	; (8004354 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	0c9b      	lsrs	r3, r3, #18
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004262:	e002      	b.n	800426a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3b01      	subs	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426a:	4b38      	ldr	r3, [pc, #224]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004276:	d102      	bne.n	800427e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f2      	bne.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800427e:	4b33      	ldr	r3, [pc, #204]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428a:	d158      	bne.n	800433e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e057      	b.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004290:	4b2e      	ldr	r3, [pc, #184]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	4a2d      	ldr	r2, [pc, #180]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800429c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042a0:	e04d      	b.n	800433e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a8:	d141      	bne.n	800432e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b6:	d131      	bne.n	800431c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042b8:	4b24      	ldr	r3, [pc, #144]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042be:	4a23      	ldr	r2, [pc, #140]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2232      	movs	r2, #50	; 0x32
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	0c9b      	lsrs	r3, r3, #18
 80042ea:	3301      	adds	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ee:	e002      	b.n	80042f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004302:	d102      	bne.n	800430a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f2      	bne.n	80042f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d112      	bne.n	800433e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e011      	b.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004322:	4a0a      	ldr	r2, [pc, #40]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800432c:	e007      	b.n	800433e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800433c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40007000 	.word	0x40007000
 8004350:	20000040 	.word	0x20000040
 8004354:	431bde83 	.word	0x431bde83

08004358 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a04      	ldr	r2, [pc, #16]	; (8004374 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004366:	6093      	str	r3, [r2, #8]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40007000 	.word	0x40007000

08004378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e2fe      	b.n	8004988 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d075      	beq.n	8004482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004396:	4b97      	ldr	r3, [pc, #604]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043a0:	4b94      	ldr	r3, [pc, #592]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b0c      	cmp	r3, #12
 80043ae:	d102      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3e>
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d002      	beq.n	80043bc <HAL_RCC_OscConfig+0x44>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d10b      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	4b8d      	ldr	r3, [pc, #564]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d05b      	beq.n	8004480 <HAL_RCC_OscConfig+0x108>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d157      	bne.n	8004480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e2d9      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d106      	bne.n	80043ec <HAL_RCC_OscConfig+0x74>
 80043de:	4b85      	ldr	r3, [pc, #532]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a84      	ldr	r2, [pc, #528]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e01d      	b.n	8004428 <HAL_RCC_OscConfig+0xb0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0x98>
 80043f6:	4b7f      	ldr	r3, [pc, #508]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a7e      	ldr	r2, [pc, #504]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80043fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b7c      	ldr	r3, [pc, #496]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7b      	ldr	r2, [pc, #492]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0xb0>
 8004410:	4b78      	ldr	r3, [pc, #480]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a77      	ldr	r2, [pc, #476]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b75      	ldr	r3, [pc, #468]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a74      	ldr	r2, [pc, #464]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d013      	beq.n	8004458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd fab6 	bl	80019a0 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fd fab2 	bl	80019a0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e29e      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444a:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0xc0>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd faa2 	bl	80019a0 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fd fa9e 	bl	80019a0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e28a      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004472:	4b60      	ldr	r3, [pc, #384]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0xe8>
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d075      	beq.n	800457a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448e:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004498:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b0c      	cmp	r3, #12
 80044a6:	d102      	bne.n	80044ae <HAL_RCC_OscConfig+0x136>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d002      	beq.n	80044b4 <HAL_RCC_OscConfig+0x13c>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d11f      	bne.n	80044f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b4:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_OscConfig+0x154>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e25d      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044cc:	4b49      	ldr	r3, [pc, #292]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	4946      	ldr	r1, [pc, #280]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044e0:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <HAL_RCC_OscConfig+0x280>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd fa0f 	bl	8001908 <HAL_InitTick>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d043      	beq.n	8004578 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e249      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d023      	beq.n	8004544 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044fc:	4b3d      	ldr	r3, [pc, #244]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3c      	ldr	r2, [pc, #240]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fd fa4a 	bl	80019a0 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004510:	f7fd fa46 	bl	80019a0 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e232      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	061b      	lsls	r3, r3, #24
 800453c:	492d      	ldr	r1, [pc, #180]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
 8004542:	e01a      	b.n	800457a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004544:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 800454a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fd fa26 	bl	80019a0 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004558:	f7fd fa22 	bl	80019a0 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e20e      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1e0>
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004578:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d041      	beq.n	800460a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459e:	f7fd f9ff 	bl	80019a0 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a6:	f7fd f9fb 	bl	80019a0 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e1e7      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0ef      	beq.n	80045a6 <HAL_RCC_OscConfig+0x22e>
 80045c6:	e020      	b.n	800460a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80045ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_RCC_OscConfig+0x27c>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fd f9e2 	bl	80019a0 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045de:	e00d      	b.n	80045fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fd f9de 	bl	80019a0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d906      	bls.n	80045fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e1ca      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045fc:	4b8c      	ldr	r3, [pc, #560]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80045fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ea      	bne.n	80045e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80a6 	beq.w	8004764 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800461c:	4b84      	ldr	r3, [pc, #528]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_RCC_OscConfig+0x2b4>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x2b6>
 800462c:	2300      	movs	r3, #0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	4b7f      	ldr	r3, [pc, #508]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	4a7e      	ldr	r2, [pc, #504]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463c:	6593      	str	r3, [r2, #88]	; 0x58
 800463e:	4b7c      	ldr	r3, [pc, #496]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464e:	4b79      	ldr	r3, [pc, #484]	; (8004834 <HAL_RCC_OscConfig+0x4bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d118      	bne.n	800468c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465a:	4b76      	ldr	r3, [pc, #472]	; (8004834 <HAL_RCC_OscConfig+0x4bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a75      	ldr	r2, [pc, #468]	; (8004834 <HAL_RCC_OscConfig+0x4bc>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004666:	f7fd f99b 	bl	80019a0 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fd f997 	bl	80019a0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e183      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004680:	4b6c      	ldr	r3, [pc, #432]	; (8004834 <HAL_RCC_OscConfig+0x4bc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d108      	bne.n	80046a6 <HAL_RCC_OscConfig+0x32e>
 8004694:	4b66      	ldr	r3, [pc, #408]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469a:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046a4:	e024      	b.n	80046f0 <HAL_RCC_OscConfig+0x378>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b05      	cmp	r3, #5
 80046ac:	d110      	bne.n	80046d0 <HAL_RCC_OscConfig+0x358>
 80046ae:	4b60      	ldr	r3, [pc, #384]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	4a5e      	ldr	r2, [pc, #376]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046be:	4b5c      	ldr	r3, [pc, #368]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	4a5a      	ldr	r2, [pc, #360]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046ce:	e00f      	b.n	80046f0 <HAL_RCC_OscConfig+0x378>
 80046d0:	4b57      	ldr	r3, [pc, #348]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	4a56      	ldr	r2, [pc, #344]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	4a52      	ldr	r2, [pc, #328]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d016      	beq.n	8004726 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd f952 	bl	80019a0 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004700:	f7fd f94e 	bl	80019a0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e138      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004716:	4b46      	ldr	r3, [pc, #280]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ed      	beq.n	8004700 <HAL_RCC_OscConfig+0x388>
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004726:	f7fd f93b 	bl	80019a0 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800472c:	e00a      	b.n	8004744 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fd f937 	bl	80019a0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e121      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004744:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1ed      	bne.n	800472e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004752:	7ffb      	ldrb	r3, [r7, #31]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d105      	bne.n	8004764 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004758:	4b35      	ldr	r3, [pc, #212]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	4a34      	ldr	r2, [pc, #208]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 800475e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004762:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d03c      	beq.n	80047ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 800477a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800477e:	4a2c      	ldr	r2, [pc, #176]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd f90a 	bl	80019a0 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004790:	f7fd f906 	bl	80019a0 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0f2      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047a2:	4b23      	ldr	r3, [pc, #140]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80047a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ef      	beq.n	8004790 <HAL_RCC_OscConfig+0x418>
 80047b0:	e01b      	b.n	80047ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047b2:	4b1f      	ldr	r3, [pc, #124]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80047b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047b8:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c2:	f7fd f8ed 	bl	80019a0 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ca:	f7fd f8e9 	bl	80019a0 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0d5      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047dc:	4b14      	ldr	r3, [pc, #80]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80047de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1ef      	bne.n	80047ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80c9 	beq.w	8004986 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	f000 8083 	beq.w	8004908 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d15e      	bne.n	80048c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480a:	4b09      	ldr	r3, [pc, #36]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <HAL_RCC_OscConfig+0x4b8>)
 8004810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fd f8c3 	bl	80019a0 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481c:	e00c      	b.n	8004838 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481e:	f7fd f8bf 	bl	80019a0 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d905      	bls.n	8004838 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e0ab      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
 8004830:	40021000 	.word	0x40021000
 8004834:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004838:	4b55      	ldr	r3, [pc, #340]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ec      	bne.n	800481e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004844:	4b52      	ldr	r3, [pc, #328]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	4b52      	ldr	r3, [pc, #328]	; (8004994 <HAL_RCC_OscConfig+0x61c>)
 800484a:	4013      	ands	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6a11      	ldr	r1, [r2, #32]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004854:	3a01      	subs	r2, #1
 8004856:	0112      	lsls	r2, r2, #4
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800485e:	0212      	lsls	r2, r2, #8
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004866:	0852      	lsrs	r2, r2, #1
 8004868:	3a01      	subs	r2, #1
 800486a:	0552      	lsls	r2, r2, #21
 800486c:	4311      	orrs	r1, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004872:	0852      	lsrs	r2, r2, #1
 8004874:	3a01      	subs	r2, #1
 8004876:	0652      	lsls	r2, r2, #25
 8004878:	4311      	orrs	r1, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800487e:	06d2      	lsls	r2, r2, #27
 8004880:	430a      	orrs	r2, r1
 8004882:	4943      	ldr	r1, [pc, #268]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 8004884:	4313      	orrs	r3, r2
 8004886:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004888:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a40      	ldr	r2, [pc, #256]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 800488e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004892:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004894:	4b3e      	ldr	r3, [pc, #248]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4a3d      	ldr	r2, [pc, #244]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 800489a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800489e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd f87e 	bl	80019a0 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fd f87a 	bl	80019a0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e066      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ba:	4b35      	ldr	r3, [pc, #212]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x530>
 80048c6:	e05e      	b.n	8004986 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c8:	4b31      	ldr	r3, [pc, #196]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 80048ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fd f864 	bl	80019a0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd f860 	bl	80019a0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e04c      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ee:	4b28      	ldr	r3, [pc, #160]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048fa:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	4924      	ldr	r1, [pc, #144]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 8004900:	4b25      	ldr	r3, [pc, #148]	; (8004998 <HAL_RCC_OscConfig+0x620>)
 8004902:	4013      	ands	r3, r2
 8004904:	60cb      	str	r3, [r1, #12]
 8004906:	e03e      	b.n	8004986 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e039      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004914:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <HAL_RCC_OscConfig+0x618>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 0203 	and.w	r2, r3, #3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	429a      	cmp	r2, r3
 8004926:	d12c      	bne.n	8004982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	3b01      	subs	r3, #1
 8004934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d123      	bne.n	8004982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d11b      	bne.n	8004982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d113      	bne.n	8004982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	3b01      	subs	r3, #1
 8004968:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d109      	bne.n	8004982 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d001      	beq.n	8004986 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	019f800c 	.word	0x019f800c
 8004998:	feeefffc 	.word	0xfeeefffc

0800499c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e11e      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b91      	ldr	r3, [pc, #580]	; (8004bfc <HAL_RCC_ClockConfig+0x260>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d910      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b8e      	ldr	r3, [pc, #568]	; (8004bfc <HAL_RCC_ClockConfig+0x260>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 020f 	bic.w	r2, r3, #15
 80049ca:	498c      	ldr	r1, [pc, #560]	; (8004bfc <HAL_RCC_ClockConfig+0x260>)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b8a      	ldr	r3, [pc, #552]	; (8004bfc <HAL_RCC_ClockConfig+0x260>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e106      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d073      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d129      	bne.n	8004a4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f8:	4b81      	ldr	r3, [pc, #516]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0f4      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a08:	f000 f99e 	bl	8004d48 <RCC_GetSysClockFreqFromPLLSource>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4a7c      	ldr	r2, [pc, #496]	; (8004c04 <HAL_RCC_ClockConfig+0x268>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d93f      	bls.n	8004a96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a16:	4b7a      	ldr	r3, [pc, #488]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d033      	beq.n	8004a96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d12f      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a36:	4b72      	ldr	r3, [pc, #456]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3e:	4a70      	ldr	r2, [pc, #448]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e024      	b.n	8004a96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d107      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a54:	4b6a      	ldr	r3, [pc, #424]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0c6      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a64:	4b66      	ldr	r3, [pc, #408]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0be      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a74:	f000 f8ce 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4a61      	ldr	r2, [pc, #388]	; (8004c04 <HAL_RCC_ClockConfig+0x268>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d909      	bls.n	8004a96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a82:	4b5f      	ldr	r3, [pc, #380]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a8a:	4a5d      	ldr	r2, [pc, #372]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a96:	4b5a      	ldr	r3, [pc, #360]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4957      	ldr	r1, [pc, #348]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa8:	f7fc ff7a 	bl	80019a0 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab0:	f7fc ff76 	bl	80019a0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e095      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	4b4e      	ldr	r3, [pc, #312]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 020c 	and.w	r2, r3, #12
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d1eb      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d023      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af0:	4b43      	ldr	r3, [pc, #268]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4a42      	ldr	r2, [pc, #264]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004afa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b08:	4b3d      	ldr	r3, [pc, #244]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b10:	4a3b      	ldr	r2, [pc, #236]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004b12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4936      	ldr	r1, [pc, #216]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b80      	cmp	r3, #128	; 0x80
 8004b30:	d105      	bne.n	8004b3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b32:	4b33      	ldr	r3, [pc, #204]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	4a32      	ldr	r2, [pc, #200]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3e:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <HAL_RCC_ClockConfig+0x260>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d21d      	bcs.n	8004b88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4c:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <HAL_RCC_ClockConfig+0x260>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 020f 	bic.w	r2, r3, #15
 8004b54:	4929      	ldr	r1, [pc, #164]	; (8004bfc <HAL_RCC_ClockConfig+0x260>)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b5c:	f7fc ff20 	bl	80019a0 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b64:	f7fc ff1c 	bl	80019a0 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e03b      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <HAL_RCC_ClockConfig+0x260>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d1ed      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b94:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4917      	ldr	r1, [pc, #92]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	490f      	ldr	r1, [pc, #60]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bc6:	f000 f825 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_RCC_ClockConfig+0x264>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	490c      	ldr	r1, [pc, #48]	; (8004c08 <HAL_RCC_ClockConfig+0x26c>)
 8004bd8:	5ccb      	ldrb	r3, [r1, r3]
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	4a0a      	ldr	r2, [pc, #40]	; (8004c0c <HAL_RCC_ClockConfig+0x270>)
 8004be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x274>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fe8c 	bl	8001908 <HAL_InitTick>
 8004bf0:	4603      	mov	r3, r0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40022000 	.word	0x40022000
 8004c00:	40021000 	.word	0x40021000
 8004c04:	04c4b400 	.word	0x04c4b400
 8004c08:	08006744 	.word	0x08006744
 8004c0c:	20000040 	.word	0x20000040
 8004c10:	20000044 	.word	0x20000044

08004c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c1a:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d102      	bne.n	8004c2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c26:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e047      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d102      	bne.n	8004c3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c38:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e03e      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c3e:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d136      	bne.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c4a:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d10c      	bne.n	8004c82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c68:	4a1a      	ldr	r2, [pc, #104]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c72:	68d2      	ldr	r2, [r2, #12]
 8004c74:	0a12      	lsrs	r2, r2, #8
 8004c76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	617b      	str	r3, [r7, #20]
      break;
 8004c80:	e00c      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c8c:	68d2      	ldr	r2, [r2, #12]
 8004c8e:	0a12      	lsrs	r2, r2, #8
 8004c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c94:	fb02 f303 	mul.w	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]
      break;
 8004c9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	0e5b      	lsrs	r3, r3, #25
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	e001      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004cbc:	693b      	ldr	r3, [r7, #16]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	016e3600 	.word	0x016e3600

08004cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_GetHCLKFreq+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000040 	.word	0x20000040

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cf4:	f7ff fff0 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4904      	ldr	r1, [pc, #16]	; (8004d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08006754 	.word	0x08006754

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d20:	f7ff ffda 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0adb      	lsrs	r3, r3, #11
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4904      	ldr	r1, [pc, #16]	; (8004d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	08006754 	.word	0x08006754

08004d48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d10c      	bne.n	8004d86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d6c:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d76:	68d2      	ldr	r2, [r2, #12]
 8004d78:	0a12      	lsrs	r2, r2, #8
 8004d7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	617b      	str	r3, [r7, #20]
    break;
 8004d84:	e00c      	b.n	8004da0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d90:	68d2      	ldr	r2, [r2, #12]
 8004d92:	0a12      	lsrs	r2, r2, #8
 8004d94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	617b      	str	r3, [r7, #20]
    break;
 8004d9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004da0:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	0e5b      	lsrs	r3, r3, #25
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004dba:	687b      	ldr	r3, [r7, #4]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	016e3600 	.word	0x016e3600
 8004dd0:	00f42400 	.word	0x00f42400

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8098 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df6:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e0e:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e1e:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a39      	ldr	r2, [pc, #228]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2a:	f7fc fdb9 	bl	80019a0 <HAL_GetTick>
 8004e2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e30:	e009      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e32:	f7fc fdb5 	bl	80019a0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d902      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	74fb      	strb	r3, [r7, #19]
        break;
 8004e44:	e005      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e46:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0ef      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e52:	7cfb      	ldrb	r3, [r7, #19]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d159      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e58:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01e      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d019      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e74:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e80:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e90:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ea0:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fc fd75 	bl	80019a0 <HAL_GetTick>
 8004eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb8:	e00b      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fc fd71 	bl	80019a0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d902      	bls.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	74fb      	strb	r3, [r7, #19]
            break;
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ec      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10b      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee6:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef4:	4903      	ldr	r1, [pc, #12]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004efc:	e008      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	74bb      	strb	r3, [r7, #18]
 8004f02:	e005      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f10:	7c7b      	ldrb	r3, [r7, #17]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4ba7      	ldr	r3, [pc, #668]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	4aa6      	ldr	r2, [pc, #664]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f2e:	4ba1      	ldr	r3, [pc, #644]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f023 0203 	bic.w	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	499d      	ldr	r1, [pc, #628]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f50:	4b98      	ldr	r3, [pc, #608]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f023 020c 	bic.w	r2, r3, #12
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4995      	ldr	r1, [pc, #596]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f72:	4b90      	ldr	r3, [pc, #576]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	498c      	ldr	r1, [pc, #560]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f94:	4b87      	ldr	r3, [pc, #540]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	4984      	ldr	r1, [pc, #528]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fb6:	4b7f      	ldr	r3, [pc, #508]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	497b      	ldr	r1, [pc, #492]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd8:	4b76      	ldr	r3, [pc, #472]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	4973      	ldr	r1, [pc, #460]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ffa:	4b6e      	ldr	r3, [pc, #440]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	496a      	ldr	r1, [pc, #424]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800501c:	4b65      	ldr	r3, [pc, #404]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	4962      	ldr	r1, [pc, #392]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800503e:	4b5d      	ldr	r3, [pc, #372]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	4959      	ldr	r1, [pc, #356]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005060:	4b54      	ldr	r3, [pc, #336]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005066:	f023 0203 	bic.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	4951      	ldr	r1, [pc, #324]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005082:	4b4c      	ldr	r3, [pc, #304]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4948      	ldr	r1, [pc, #288]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d015      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a4:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	4940      	ldr	r1, [pc, #256]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c2:	d105      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c4:	4b3b      	ldr	r3, [pc, #236]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a3a      	ldr	r2, [pc, #232]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d015      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050dc:	4b35      	ldr	r3, [pc, #212]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ea:	4932      	ldr	r1, [pc, #200]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fa:	d105      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050fc:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005106:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005114:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	4924      	ldr	r1, [pc, #144]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005132:	d105      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800514c:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515a:	4916      	ldr	r1, [pc, #88]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516a:	d105      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005176:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d019      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4908      	ldr	r1, [pc, #32]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a2:	d109      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a02      	ldr	r2, [pc, #8]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ae:	60d3      	str	r3, [r2, #12]
 80051b0:	e002      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d015      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051c4:	4b29      	ldr	r3, [pc, #164]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	4926      	ldr	r1, [pc, #152]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e2:	d105      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051e4:	4b21      	ldr	r3, [pc, #132]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a20      	ldr	r2, [pc, #128]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d015      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	4918      	ldr	r1, [pc, #96]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d105      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a12      	ldr	r2, [pc, #72]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005226:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d015      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800523a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005242:	490a      	ldr	r1, [pc, #40]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005252:	d105      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005254:	4b05      	ldr	r3, [pc, #20]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800525a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800525e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005260:	7cbb      	ldrb	r3, [r7, #18]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000

08005270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e049      	b.n	8005316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc fa88 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f000 f9bc 	bl	800562c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d001      	beq.n	8005338 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e04c      	b.n	80053d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a26      	ldr	r2, [pc, #152]	; (80053e0 <HAL_TIM_Base_Start+0xc0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d022      	beq.n	8005390 <HAL_TIM_Base_Start+0x70>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d01d      	beq.n	8005390 <HAL_TIM_Base_Start+0x70>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a22      	ldr	r2, [pc, #136]	; (80053e4 <HAL_TIM_Base_Start+0xc4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d018      	beq.n	8005390 <HAL_TIM_Base_Start+0x70>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a21      	ldr	r2, [pc, #132]	; (80053e8 <HAL_TIM_Base_Start+0xc8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <HAL_TIM_Base_Start+0x70>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <HAL_TIM_Base_Start+0xcc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <HAL_TIM_Base_Start+0x70>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <HAL_TIM_Base_Start+0xd0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_TIM_Base_Start+0x70>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <HAL_TIM_Base_Start+0xd4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIM_Base_Start+0x70>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_TIM_Base_Start+0xd8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d115      	bne.n	80053bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	4b19      	ldr	r3, [pc, #100]	; (80053fc <HAL_TIM_Base_Start+0xdc>)
 8005398:	4013      	ands	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d015      	beq.n	80053ce <HAL_TIM_Base_Start+0xae>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d011      	beq.n	80053ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	e008      	b.n	80053ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e000      	b.n	80053d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40015000 	.word	0x40015000
 80053fc:	00010007 	.word	0x00010007

08005400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIM_ConfigClockSource+0x1c>
 8005418:	2302      	movs	r3, #2
 800541a:	e0f6      	b.n	800560a <HAL_TIM_ConfigClockSource+0x20a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800543a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800543e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a6f      	ldr	r2, [pc, #444]	; (8005614 <HAL_TIM_ConfigClockSource+0x214>)
 8005456:	4293      	cmp	r3, r2
 8005458:	f000 80c1 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x1de>
 800545c:	4a6d      	ldr	r2, [pc, #436]	; (8005614 <HAL_TIM_ConfigClockSource+0x214>)
 800545e:	4293      	cmp	r3, r2
 8005460:	f200 80c6 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005464:	4a6c      	ldr	r2, [pc, #432]	; (8005618 <HAL_TIM_ConfigClockSource+0x218>)
 8005466:	4293      	cmp	r3, r2
 8005468:	f000 80b9 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x1de>
 800546c:	4a6a      	ldr	r2, [pc, #424]	; (8005618 <HAL_TIM_ConfigClockSource+0x218>)
 800546e:	4293      	cmp	r3, r2
 8005470:	f200 80be 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005474:	4a69      	ldr	r2, [pc, #420]	; (800561c <HAL_TIM_ConfigClockSource+0x21c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	f000 80b1 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x1de>
 800547c:	4a67      	ldr	r2, [pc, #412]	; (800561c <HAL_TIM_ConfigClockSource+0x21c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	f200 80b6 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005484:	4a66      	ldr	r2, [pc, #408]	; (8005620 <HAL_TIM_ConfigClockSource+0x220>)
 8005486:	4293      	cmp	r3, r2
 8005488:	f000 80a9 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x1de>
 800548c:	4a64      	ldr	r2, [pc, #400]	; (8005620 <HAL_TIM_ConfigClockSource+0x220>)
 800548e:	4293      	cmp	r3, r2
 8005490:	f200 80ae 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005494:	4a63      	ldr	r2, [pc, #396]	; (8005624 <HAL_TIM_ConfigClockSource+0x224>)
 8005496:	4293      	cmp	r3, r2
 8005498:	f000 80a1 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x1de>
 800549c:	4a61      	ldr	r2, [pc, #388]	; (8005624 <HAL_TIM_ConfigClockSource+0x224>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f200 80a6 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80054a4:	4a60      	ldr	r2, [pc, #384]	; (8005628 <HAL_TIM_ConfigClockSource+0x228>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	f000 8099 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x1de>
 80054ac:	4a5e      	ldr	r2, [pc, #376]	; (8005628 <HAL_TIM_ConfigClockSource+0x228>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	f200 809e 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80054b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054b8:	f000 8091 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x1de>
 80054bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80054c0:	f200 8096 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80054c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054c8:	f000 8089 	beq.w	80055de <HAL_TIM_ConfigClockSource+0x1de>
 80054cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d0:	f200 808e 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d8:	d03e      	beq.n	8005558 <HAL_TIM_ConfigClockSource+0x158>
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054de:	f200 8087 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80054e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e6:	f000 8086 	beq.w	80055f6 <HAL_TIM_ConfigClockSource+0x1f6>
 80054ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ee:	d87f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80054f0:	2b70      	cmp	r3, #112	; 0x70
 80054f2:	d01a      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x12a>
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d87b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d050      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x19e>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d877      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d03c      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x17e>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d873      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d058      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x1be>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d86f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d064      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x1de>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d86b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d060      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x1de>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d867      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x1de>
 8005524:	2b10      	cmp	r3, #16
 8005526:	d05a      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x1de>
 8005528:	e062      	b.n	80055f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	f000 f9a7 	bl	800588c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800554c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	609a      	str	r2, [r3, #8]
      break;
 8005556:	e04f      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	f000 f990 	bl	800588c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557a:	609a      	str	r2, [r3, #8]
      break;
 800557c:	e03c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558a:	461a      	mov	r2, r3
 800558c:	f000 f902 	bl	8005794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2150      	movs	r1, #80	; 0x50
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f95b 	bl	8005852 <TIM_ITRx_SetConfig>
      break;
 800559c:	e02c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 f921 	bl	80057f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2160      	movs	r1, #96	; 0x60
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f94b 	bl	8005852 <TIM_ITRx_SetConfig>
      break;
 80055bc:	e01c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ca:	461a      	mov	r2, r3
 80055cc:	f000 f8e2 	bl	8005794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2140      	movs	r1, #64	; 0x40
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f93b 	bl	8005852 <TIM_ITRx_SetConfig>
      break;
 80055dc:	e00c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f000 f932 	bl	8005852 <TIM_ITRx_SetConfig>
      break;
 80055ee:	e003      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      break;
 80055f4:	e000      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80055f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	00100070 	.word	0x00100070
 8005618:	00100060 	.word	0x00100060
 800561c:	00100050 	.word	0x00100050
 8005620:	00100040 	.word	0x00100040
 8005624:	00100030 	.word	0x00100030
 8005628:	00100020 	.word	0x00100020

0800562c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a4c      	ldr	r2, [pc, #304]	; (8005770 <TIM_Base_SetConfig+0x144>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d017      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564a:	d013      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a49      	ldr	r2, [pc, #292]	; (8005774 <TIM_Base_SetConfig+0x148>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a48      	ldr	r2, [pc, #288]	; (8005778 <TIM_Base_SetConfig+0x14c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a47      	ldr	r2, [pc, #284]	; (800577c <TIM_Base_SetConfig+0x150>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a46      	ldr	r2, [pc, #280]	; (8005780 <TIM_Base_SetConfig+0x154>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0x48>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a45      	ldr	r2, [pc, #276]	; (8005784 <TIM_Base_SetConfig+0x158>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a39      	ldr	r2, [pc, #228]	; (8005770 <TIM_Base_SetConfig+0x144>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d023      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005694:	d01f      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a36      	ldr	r2, [pc, #216]	; (8005774 <TIM_Base_SetConfig+0x148>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01b      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a35      	ldr	r2, [pc, #212]	; (8005778 <TIM_Base_SetConfig+0x14c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d017      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a34      	ldr	r2, [pc, #208]	; (800577c <TIM_Base_SetConfig+0x150>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a33      	ldr	r2, [pc, #204]	; (8005780 <TIM_Base_SetConfig+0x154>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00f      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a33      	ldr	r2, [pc, #204]	; (8005788 <TIM_Base_SetConfig+0x15c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a32      	ldr	r2, [pc, #200]	; (800578c <TIM_Base_SetConfig+0x160>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a31      	ldr	r2, [pc, #196]	; (8005790 <TIM_Base_SetConfig+0x164>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_Base_SetConfig+0xaa>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <TIM_Base_SetConfig+0x158>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d108      	bne.n	80056e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a18      	ldr	r2, [pc, #96]	; (8005770 <TIM_Base_SetConfig+0x144>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <TIM_Base_SetConfig+0x154>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00f      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1a      	ldr	r2, [pc, #104]	; (8005788 <TIM_Base_SetConfig+0x15c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00b      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a19      	ldr	r2, [pc, #100]	; (800578c <TIM_Base_SetConfig+0x160>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d007      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a18      	ldr	r2, [pc, #96]	; (8005790 <TIM_Base_SetConfig+0x164>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_Base_SetConfig+0x110>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a13      	ldr	r2, [pc, #76]	; (8005784 <TIM_Base_SetConfig+0x158>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d103      	bne.n	8005744 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d105      	bne.n	8005762 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f023 0201 	bic.w	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	611a      	str	r2, [r3, #16]
  }
}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40013400 	.word	0x40013400
 8005784:	40015000 	.word	0x40015000
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800

08005794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f023 0201 	bic.w	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 030a 	bic.w	r3, r3, #10
 80057d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b087      	sub	sp, #28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f023 0210 	bic.w	r2, r3, #16
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800581c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	031b      	lsls	r3, r3, #12
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800582e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	f043 0307 	orr.w	r3, r3, #7
 8005878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	021a      	lsls	r2, r3, #8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	609a      	str	r2, [r3, #8]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e074      	b.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a34      	ldr	r2, [pc, #208]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d009      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a33      	ldr	r2, [pc, #204]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d004      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a31      	ldr	r2, [pc, #196]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d108      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005928:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a21      	ldr	r2, [pc, #132]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d022      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005964:	d01d      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d018      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a18      	ldr	r2, [pc, #96]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a11      	ldr	r2, [pc, #68]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d10c      	bne.n	80059bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40015000 	.word	0x40015000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40014000 	.word	0x40014000

080059f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e042      	b.n	8005a90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fb fe6d 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2224      	movs	r2, #36	; 0x24
 8005a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fb24 	bl	8006090 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f825 	bl	8005a98 <UART_SetConfig>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e01b      	b.n	8005a90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fba3 	bl	80061d4 <UART_CheckIdleState>
 8005a8e:	4603      	mov	r3, r0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a9c:	b08c      	sub	sp, #48	; 0x30
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4baa      	ldr	r3, [pc, #680]	; (8005d70 <UART_SetConfig+0x2d8>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a9f      	ldr	r2, [pc, #636]	; (8005d74 <UART_SetConfig+0x2dc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b00:	4313      	orrs	r3, r2
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	f023 010f 	bic.w	r1, r3, #15
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a90      	ldr	r2, [pc, #576]	; (8005d78 <UART_SetConfig+0x2e0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d125      	bne.n	8005b88 <UART_SetConfig+0xf0>
 8005b3c:	4b8f      	ldr	r3, [pc, #572]	; (8005d7c <UART_SetConfig+0x2e4>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d81a      	bhi.n	8005b80 <UART_SetConfig+0xe8>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0xb8>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b71 	.word	0x08005b71
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b66:	e116      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b6e:	e112      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005b70:	2304      	movs	r3, #4
 8005b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b76:	e10e      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005b78:	2308      	movs	r3, #8
 8005b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b7e:	e10a      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005b80:	2310      	movs	r3, #16
 8005b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b86:	e106      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a7c      	ldr	r2, [pc, #496]	; (8005d80 <UART_SetConfig+0x2e8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d138      	bne.n	8005c04 <UART_SetConfig+0x16c>
 8005b92:	4b7a      	ldr	r3, [pc, #488]	; (8005d7c <UART_SetConfig+0x2e4>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b98:	f003 030c 	and.w	r3, r3, #12
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	d82d      	bhi.n	8005bfc <UART_SetConfig+0x164>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <UART_SetConfig+0x110>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bdd 	.word	0x08005bdd
 8005bac:	08005bfd 	.word	0x08005bfd
 8005bb0:	08005bfd 	.word	0x08005bfd
 8005bb4:	08005bfd 	.word	0x08005bfd
 8005bb8:	08005bed 	.word	0x08005bed
 8005bbc:	08005bfd 	.word	0x08005bfd
 8005bc0:	08005bfd 	.word	0x08005bfd
 8005bc4:	08005bfd 	.word	0x08005bfd
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bfd 	.word	0x08005bfd
 8005bd0:	08005bfd 	.word	0x08005bfd
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005bf5 	.word	0x08005bf5
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e0d8      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005be4:	2302      	movs	r3, #2
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bea:	e0d4      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf2:	e0d0      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bfa:	e0cc      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c02:	e0c8      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a5e      	ldr	r2, [pc, #376]	; (8005d84 <UART_SetConfig+0x2ec>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d125      	bne.n	8005c5a <UART_SetConfig+0x1c2>
 8005c0e:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <UART_SetConfig+0x2e4>)
 8005c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c18:	2b30      	cmp	r3, #48	; 0x30
 8005c1a:	d016      	beq.n	8005c4a <UART_SetConfig+0x1b2>
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d818      	bhi.n	8005c52 <UART_SetConfig+0x1ba>
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d00a      	beq.n	8005c3a <UART_SetConfig+0x1a2>
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d814      	bhi.n	8005c52 <UART_SetConfig+0x1ba>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <UART_SetConfig+0x19a>
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d008      	beq.n	8005c42 <UART_SetConfig+0x1aa>
 8005c30:	e00f      	b.n	8005c52 <UART_SetConfig+0x1ba>
 8005c32:	2300      	movs	r3, #0
 8005c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c38:	e0ad      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c40:	e0a9      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005c42:	2304      	movs	r3, #4
 8005c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c48:	e0a5      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c50:	e0a1      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005c52:	2310      	movs	r3, #16
 8005c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c58:	e09d      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a4a      	ldr	r2, [pc, #296]	; (8005d88 <UART_SetConfig+0x2f0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d125      	bne.n	8005cb0 <UART_SetConfig+0x218>
 8005c64:	4b45      	ldr	r3, [pc, #276]	; (8005d7c <UART_SetConfig+0x2e4>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c70:	d016      	beq.n	8005ca0 <UART_SetConfig+0x208>
 8005c72:	2bc0      	cmp	r3, #192	; 0xc0
 8005c74:	d818      	bhi.n	8005ca8 <UART_SetConfig+0x210>
 8005c76:	2b80      	cmp	r3, #128	; 0x80
 8005c78:	d00a      	beq.n	8005c90 <UART_SetConfig+0x1f8>
 8005c7a:	2b80      	cmp	r3, #128	; 0x80
 8005c7c:	d814      	bhi.n	8005ca8 <UART_SetConfig+0x210>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <UART_SetConfig+0x1f0>
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d008      	beq.n	8005c98 <UART_SetConfig+0x200>
 8005c86:	e00f      	b.n	8005ca8 <UART_SetConfig+0x210>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	e082      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005c90:	2302      	movs	r3, #2
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c96:	e07e      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9e:	e07a      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca6:	e076      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cae:	e072      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a35      	ldr	r2, [pc, #212]	; (8005d8c <UART_SetConfig+0x2f4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d12a      	bne.n	8005d10 <UART_SetConfig+0x278>
 8005cba:	4b30      	ldr	r3, [pc, #192]	; (8005d7c <UART_SetConfig+0x2e4>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc8:	d01a      	beq.n	8005d00 <UART_SetConfig+0x268>
 8005cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cce:	d81b      	bhi.n	8005d08 <UART_SetConfig+0x270>
 8005cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd4:	d00c      	beq.n	8005cf0 <UART_SetConfig+0x258>
 8005cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cda:	d815      	bhi.n	8005d08 <UART_SetConfig+0x270>
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <UART_SetConfig+0x250>
 8005ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce4:	d008      	beq.n	8005cf8 <UART_SetConfig+0x260>
 8005ce6:	e00f      	b.n	8005d08 <UART_SetConfig+0x270>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cee:	e052      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf6:	e04e      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfe:	e04a      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005d00:	2308      	movs	r3, #8
 8005d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d06:	e046      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0e:	e042      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <UART_SetConfig+0x2dc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d13a      	bne.n	8005d90 <UART_SetConfig+0x2f8>
 8005d1a:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <UART_SetConfig+0x2e4>)
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d28:	d01a      	beq.n	8005d60 <UART_SetConfig+0x2c8>
 8005d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d2e:	d81b      	bhi.n	8005d68 <UART_SetConfig+0x2d0>
 8005d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d34:	d00c      	beq.n	8005d50 <UART_SetConfig+0x2b8>
 8005d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3a:	d815      	bhi.n	8005d68 <UART_SetConfig+0x2d0>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <UART_SetConfig+0x2b0>
 8005d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d44:	d008      	beq.n	8005d58 <UART_SetConfig+0x2c0>
 8005d46:	e00f      	b.n	8005d68 <UART_SetConfig+0x2d0>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4e:	e022      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005d50:	2302      	movs	r3, #2
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d56:	e01e      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5e:	e01a      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d66:	e016      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e012      	b.n	8005d96 <UART_SetConfig+0x2fe>
 8005d70:	cfff69f3 	.word	0xcfff69f3
 8005d74:	40008000 	.word	0x40008000
 8005d78:	40013800 	.word	0x40013800
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40004400 	.word	0x40004400
 8005d84:	40004800 	.word	0x40004800
 8005d88:	40004c00 	.word	0x40004c00
 8005d8c:	40005000 	.word	0x40005000
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4aae      	ldr	r2, [pc, #696]	; (8006054 <UART_SetConfig+0x5bc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	f040 8097 	bne.w	8005ed0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d823      	bhi.n	8005df2 <UART_SetConfig+0x35a>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <UART_SetConfig+0x318>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005dd5 	.word	0x08005dd5
 8005db4:	08005df3 	.word	0x08005df3
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005de3 	.word	0x08005de3
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005df3 	.word	0x08005df3
 8005dcc:	08005df3 	.word	0x08005df3
 8005dd0:	08005deb 	.word	0x08005deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f7fe ff8c 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dda:	e010      	b.n	8005dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b9e      	ldr	r3, [pc, #632]	; (8006058 <UART_SetConfig+0x5c0>)
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005de0:	e00d      	b.n	8005dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fe ff17 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8005de6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005de8:	e009      	b.n	8005dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005df0:	e005      	b.n	8005dfe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8130 	beq.w	8006066 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	4a94      	ldr	r2, [pc, #592]	; (800605c <UART_SetConfig+0x5c4>)
 8005e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	4413      	add	r3, r2
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d305      	bcc.n	8005e36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d903      	bls.n	8005e3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e3c:	e113      	b.n	8006066 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	2200      	movs	r2, #0
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	60fa      	str	r2, [r7, #12]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	4a84      	ldr	r2, [pc, #528]	; (800605c <UART_SetConfig+0x5c4>)
 8005e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2200      	movs	r2, #0
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e60:	f7fa fdc8 	bl	80009f4 <__aeabi_uldivmod>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	020b      	lsls	r3, r1, #8
 8005e76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e7a:	0202      	lsls	r2, r0, #8
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	6849      	ldr	r1, [r1, #4]
 8005e80:	0849      	lsrs	r1, r1, #1
 8005e82:	2000      	movs	r0, #0
 8005e84:	460c      	mov	r4, r1
 8005e86:	4605      	mov	r5, r0
 8005e88:	eb12 0804 	adds.w	r8, r2, r4
 8005e8c:	eb43 0905 	adc.w	r9, r3, r5
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	469a      	mov	sl, r3
 8005e98:	4693      	mov	fp, r2
 8005e9a:	4652      	mov	r2, sl
 8005e9c:	465b      	mov	r3, fp
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	f7fa fda7 	bl	80009f4 <__aeabi_uldivmod>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4613      	mov	r3, r2
 8005eac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb4:	d308      	bcc.n	8005ec8 <UART_SetConfig+0x430>
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ebc:	d204      	bcs.n	8005ec8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	60da      	str	r2, [r3, #12]
 8005ec6:	e0ce      	b.n	8006066 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ece:	e0ca      	b.n	8006066 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	d166      	bne.n	8005fa8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005eda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d827      	bhi.n	8005f32 <UART_SetConfig+0x49a>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <UART_SetConfig+0x450>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f15 	.word	0x08005f15
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	08005f33 	.word	0x08005f33
 8005ef8:	08005f23 	.word	0x08005f23
 8005efc:	08005f33 	.word	0x08005f33
 8005f00:	08005f33 	.word	0x08005f33
 8005f04:	08005f33 	.word	0x08005f33
 8005f08:	08005f2b 	.word	0x08005f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0c:	f7fe fef0 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8005f10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f12:	e014      	b.n	8005f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f14:	f7fe ff02 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8005f18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f1a:	e010      	b.n	8005f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f1c:	4b4e      	ldr	r3, [pc, #312]	; (8006058 <UART_SetConfig+0x5c0>)
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f20:	e00d      	b.n	8005f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f22:	f7fe fe77 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8005f26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f28:	e009      	b.n	8005f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f30:	e005      	b.n	8005f3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8090 	beq.w	8006066 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	4a44      	ldr	r2, [pc, #272]	; (800605c <UART_SetConfig+0x5c4>)
 8005f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f58:	005a      	lsls	r2, r3, #1
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	085b      	lsrs	r3, r3, #1
 8005f60:	441a      	add	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b0f      	cmp	r3, #15
 8005f70:	d916      	bls.n	8005fa0 <UART_SetConfig+0x508>
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d212      	bcs.n	8005fa0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f023 030f 	bic.w	r3, r3, #15
 8005f82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	8bfb      	ldrh	r3, [r7, #30]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	8bfa      	ldrh	r2, [r7, #30]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	e062      	b.n	8006066 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fa6:	e05e      	b.n	8006066 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d828      	bhi.n	8006002 <UART_SetConfig+0x56a>
 8005fb0:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <UART_SetConfig+0x520>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fed 	.word	0x08005fed
 8005fc4:	08006003 	.word	0x08006003
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08006003 	.word	0x08006003
 8005fd4:	08006003 	.word	0x08006003
 8005fd8:	08005ffb 	.word	0x08005ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fdc:	f7fe fe88 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8005fe0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fe2:	e014      	b.n	800600e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe4:	f7fe fe9a 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8005fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fea:	e010      	b.n	800600e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fec:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <UART_SetConfig+0x5c0>)
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ff0:	e00d      	b.n	800600e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7fe fe0f 	bl	8004c14 <HAL_RCC_GetSysClockFreq>
 8005ff6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ff8:	e009      	b.n	800600e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006000:	e005      	b.n	800600e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800600c:	bf00      	nop
    }

    if (pclk != 0U)
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d028      	beq.n	8006066 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	4a10      	ldr	r2, [pc, #64]	; (800605c <UART_SetConfig+0x5c4>)
 800601a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800601e:	461a      	mov	r2, r3
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	fbb3 f2f2 	udiv	r2, r3, r2
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	441a      	add	r2, r3
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	fbb2 f3f3 	udiv	r3, r2, r3
 8006036:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b0f      	cmp	r3, #15
 800603c:	d910      	bls.n	8006060 <UART_SetConfig+0x5c8>
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006044:	d20c      	bcs.n	8006060 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	b29a      	uxth	r2, r3
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60da      	str	r2, [r3, #12]
 8006050:	e009      	b.n	8006066 <UART_SetConfig+0x5ce>
 8006052:	bf00      	nop
 8006054:	40008000 	.word	0x40008000
 8006058:	00f42400 	.word	0x00f42400
 800605c:	0800675c 	.word	0x0800675c
      }
      else
      {
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2201      	movs	r2, #1
 800606a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2201      	movs	r2, #1
 8006072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2200      	movs	r2, #0
 800607a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006082:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006086:	4618      	mov	r0, r3
 8006088:	3730      	adds	r7, #48	; 0x30
 800608a:	46bd      	mov	sp, r7
 800608c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00a      	beq.n	80060fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01a      	beq.n	80061a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800618e:	d10a      	bne.n	80061a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]
  }
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b098      	sub	sp, #96	; 0x60
 80061d8:	af02      	add	r7, sp, #8
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e4:	f7fb fbdc 	bl	80019a0 <HAL_GetTick>
 80061e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d12f      	bne.n	8006258 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006200:	2200      	movs	r2, #0
 8006202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f88e 	bl	8006328 <UART_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d022      	beq.n	8006258 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006226:	653b      	str	r3, [r7, #80]	; 0x50
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006230:	647b      	str	r3, [r7, #68]	; 0x44
 8006232:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800623e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e6      	bne.n	8006212 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e063      	b.n	8006320 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b04      	cmp	r3, #4
 8006264:	d149      	bne.n	80062fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800626e:	2200      	movs	r2, #0
 8006270:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f857 	bl	8006328 <UART_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d03c      	beq.n	80062fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	623b      	str	r3, [r7, #32]
   return(result);
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629e:	633b      	str	r3, [r7, #48]	; 0x30
 80062a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e6      	bne.n	8006280 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3308      	adds	r3, #8
 80062d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d2:	61fa      	str	r2, [r7, #28]
 80062d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	69b9      	ldr	r1, [r7, #24]
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	617b      	str	r3, [r7, #20]
   return(result);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e5      	bne.n	80062b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e012      	b.n	8006320 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3758      	adds	r7, #88	; 0x58
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006338:	e04f      	b.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d04b      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fb fb2d 	bl	80019a0 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <UART_WaitOnFlagUntilTimeout+0x30>
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e04e      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d037      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d034      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d031      	beq.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b08      	cmp	r3, #8
 8006382:	d110      	bne.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2208      	movs	r2, #8
 800638a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f838 	bl	8006402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2208      	movs	r2, #8
 8006396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e029      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063b4:	d111      	bne.n	80063da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f81e 	bl	8006402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e00f      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4013      	ands	r3, r2
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	bf0c      	ite	eq
 80063ea:	2301      	moveq	r3, #1
 80063ec:	2300      	movne	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d0a0      	beq.n	800633a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006402:	b480      	push	{r7}
 8006404:	b095      	sub	sp, #84	; 0x54
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006428:	643b      	str	r3, [r7, #64]	; 0x40
 800642a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800642e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e6      	bne.n	800640a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3308      	adds	r3, #8
 8006442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	61fb      	str	r3, [r7, #28]
   return(result);
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	64bb      	str	r3, [r7, #72]	; 0x48
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3308      	adds	r3, #8
 800645e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e3      	bne.n	800643c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d118      	bne.n	80064ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	60bb      	str	r3, [r7, #8]
   return(result);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f023 0310 	bic.w	r3, r3, #16
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6979      	ldr	r1, [r7, #20]
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	613b      	str	r3, [r7, #16]
   return(result);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e6      	bne.n	800647c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80064c2:	bf00      	nop
 80064c4:	3754      	adds	r7, #84	; 0x54
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e027      	b.n	8006534 <HAL_UARTEx_DisableFifoMode+0x66>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	; 0x24
 80064f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006512:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006554:	2302      	movs	r3, #2
 8006556:	e02d      	b.n	80065b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	; 0x24
 8006564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f84f 	bl	8006638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e02d      	b.n	8006630 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2224      	movs	r2, #36	; 0x24
 80065e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f811 	bl	8006638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006644:	2b00      	cmp	r3, #0
 8006646:	d108      	bne.n	800665a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006658:	e031      	b.n	80066be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800665a:	2308      	movs	r3, #8
 800665c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800665e:	2308      	movs	r3, #8
 8006660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	0e5b      	lsrs	r3, r3, #25
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	0f5b      	lsrs	r3, r3, #29
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	7b3a      	ldrb	r2, [r7, #12]
 8006686:	4911      	ldr	r1, [pc, #68]	; (80066cc <UARTEx_SetNbDataToProcess+0x94>)
 8006688:	5c8a      	ldrb	r2, [r1, r2]
 800668a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800668e:	7b3a      	ldrb	r2, [r7, #12]
 8006690:	490f      	ldr	r1, [pc, #60]	; (80066d0 <UARTEx_SetNbDataToProcess+0x98>)
 8006692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006694:	fb93 f3f2 	sdiv	r3, r3, r2
 8006698:	b29a      	uxth	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	7b7a      	ldrb	r2, [r7, #13]
 80066a4:	4909      	ldr	r1, [pc, #36]	; (80066cc <UARTEx_SetNbDataToProcess+0x94>)
 80066a6:	5c8a      	ldrb	r2, [r1, r2]
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066ac:	7b7a      	ldrb	r2, [r7, #13]
 80066ae:	4908      	ldr	r1, [pc, #32]	; (80066d0 <UARTEx_SetNbDataToProcess+0x98>)
 80066b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	08006774 	.word	0x08006774
 80066d0:	0800677c 	.word	0x0800677c

080066d4 <memset>:
 80066d4:	4402      	add	r2, r0
 80066d6:	4603      	mov	r3, r0
 80066d8:	4293      	cmp	r3, r2
 80066da:	d100      	bne.n	80066de <memset+0xa>
 80066dc:	4770      	bx	lr
 80066de:	f803 1b01 	strb.w	r1, [r3], #1
 80066e2:	e7f9      	b.n	80066d8 <memset+0x4>

080066e4 <__libc_init_array>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4d0d      	ldr	r5, [pc, #52]	; (800671c <__libc_init_array+0x38>)
 80066e8:	4c0d      	ldr	r4, [pc, #52]	; (8006720 <__libc_init_array+0x3c>)
 80066ea:	1b64      	subs	r4, r4, r5
 80066ec:	10a4      	asrs	r4, r4, #2
 80066ee:	2600      	movs	r6, #0
 80066f0:	42a6      	cmp	r6, r4
 80066f2:	d109      	bne.n	8006708 <__libc_init_array+0x24>
 80066f4:	4d0b      	ldr	r5, [pc, #44]	; (8006724 <__libc_init_array+0x40>)
 80066f6:	4c0c      	ldr	r4, [pc, #48]	; (8006728 <__libc_init_array+0x44>)
 80066f8:	f000 f818 	bl	800672c <_init>
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	2600      	movs	r6, #0
 8006702:	42a6      	cmp	r6, r4
 8006704:	d105      	bne.n	8006712 <__libc_init_array+0x2e>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	f855 3b04 	ldr.w	r3, [r5], #4
 800670c:	4798      	blx	r3
 800670e:	3601      	adds	r6, #1
 8006710:	e7ee      	b.n	80066f0 <__libc_init_array+0xc>
 8006712:	f855 3b04 	ldr.w	r3, [r5], #4
 8006716:	4798      	blx	r3
 8006718:	3601      	adds	r6, #1
 800671a:	e7f2      	b.n	8006702 <__libc_init_array+0x1e>
 800671c:	0800678c 	.word	0x0800678c
 8006720:	0800678c 	.word	0x0800678c
 8006724:	0800678c 	.word	0x0800678c
 8006728:	08006790 	.word	0x08006790

0800672c <_init>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr

08006738 <_fini>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr
